* Advanced object oriented design and development with Pharo
https://lms.fun-mooc.fr/courses/course-v1:inria+41031+session01/info

https://lms.fun-mooc.fr/courses/course-v1:inria+41031+session01/47ab218f99c744b8bf9a5d557a45293e/

** Module 0

http://books.pharo.org/pharo-by-example9/pdf/2022-03-26-index.pdf

*** 0.1
https://lms.fun-mooc.fr/courses/course-v1:inria+41031+session01/jump_to_id/053e2de03bbf45ba8dd73b710c8d2f7b

*** 0.2
https://lms.fun-mooc.fr/courses/course-v1:inria+41031+session01/courseware/a2659b7d12eb4436af66a8174eb04ad0/44bb82c9b49641aaad0ba470db863664/

https://en.wikipedia.org/wiki/File:Pharo_syntax_postcard.svg

bigger postcard
https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Pharo_syntax_postcard.svg/1024px-Pharo_syntax_postcard.svg.png

**** syntax elements
string 'string'
comment "this is  a comment"
character $c
symbol #mac
array #(1 2 3)
integer 1 2r101
real 1.5, 2.4e7
boolean true, false
undefined nil
point 10@20
return ^ expression
variable declaration |var|
assignment var := 1
separator in sequence of messages message.message
block [:x| x+2 ] value: 5   ==> 7

***** classes

***** methods

*** 0.3 Class and Methods Definitions
classes and methods are defined by the IDE tools
no dedicated syntax

so only the IDE knows to which class the method belongs

factorial example at 2:13

method returns self by default, so ^self is optional

using IDE to define class methods

class methods vs instance methods

**** pharo 11 and 12 differences
#+begin_example
 Object subclass: #Point
instanceVariableNames: 'x y'
classVariableNames: ''
package: 'Graphics'

The name of the message is therefore:

subclass:instanceVariableNames:classVariableNames:package:

Pay attention that in Pharo 12 the way classes are created is different. It is

Object << #Point
slots: { #x . #y };
tag: 'BasicObjects';
package: 'Kernel'
#+end_example

*** 0.4 Understanding Messages

precedence
(msg in parentheses) > unary > binary > keywords

unary   9 squared
binary  9 + 1
keyword 9 add:1

10@20 setX:2

*** TODO 0.5 Messages for Java Programmers

*** TODO 0.6 Messages: Composition and Precedence

*** TODO 0.7 Understanding Messages: Sequence and Cascade

*** TODO 0.8 Introduction to Blocks
