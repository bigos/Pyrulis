* Advanced object oriented design and development with Pharo
https://lms.fun-mooc.fr/courses/course-v1:inria+41031+session01/info

https://lms.fun-mooc.fr/courses/course-v1:inria+41031+session01/47ab218f99c744b8bf9a5d557a45293e/

** Module 0

http://books.pharo.org/pharo-by-example9/pdf/2022-03-26-index.pdf

[[*pharo 11 and 12 differences][pharo 11 and 12 differences]]

[[*bigger postcard][bigger postcard]]

*** 0.1
https://lms.fun-mooc.fr/courses/course-v1:inria+41031+session01/jump_to_id/053e2de03bbf45ba8dd73b710c8d2f7b

*** 0.2
https://lms.fun-mooc.fr/courses/course-v1:inria+41031+session01/courseware/a2659b7d12eb4436af66a8174eb04ad0/44bb82c9b49641aaad0ba470db863664/

https://en.wikipedia.org/wiki/File:Pharo_syntax_postcard.svg

**** bigger postcard
https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Pharo_syntax_postcard.svg/1024px-Pharo_syntax_postcard.svg.png

**** syntax elements
string 'string'
comment "this is  a comment"
character $c
symbol #mac
array #(1 2 3)
integer 1 2r101
real 1.5, 2.4e7
boolean true, false
undefined nil
point 10@20
return ^ expression
variable declaration |var|
assignment var := 1
separator in sequence of messages message.message
block [:x| x+2 ] value: 5   ==> 7

***** classes

***** methods

*** 0.3 Class and Methods Definitions
classes and methods are defined by the IDE tools
no dedicated syntax

so only the IDE knows to which class the method belongs

factorial example at 2:13

method returns self by default, so ^self is optional

using IDE to define class methods

class methods vs instance methods

**** pharo 11 and 12 differences
#+begin_example
 Object subclass: #Point
instanceVariableNames: 'x y'
classVariableNames: ''
package: 'Graphics'

The name of the message is therefore:

subclass:instanceVariableNames:classVariableNames:package:

Pay attention that in Pharo 12 the way classes are created is different. It is

Object << #Point
slots: { #x . #y };
tag: 'BasicObjects';
package: 'Kernel'
#+end_example

*** 0.4 Understanding Messages

precedence
(msg in parentheses) > unary > binary > keywords

unary   9 squared
binary  9 + 1
keyword 9 add:1

10@20 setX:2

*** 0.5 Messages for Java Programmers

#+begin_src java
ArrayList<String> strings = new ArrayList<String>();
#+end_src

#+begin_src pharo
strings := OrderedCollection new.
#+end_src

#+begin_src java
  Thread regThread = new Thread(
    new Runnable() {
        @Override
        public void run() {
            this.doSomething;
        }
    });
  regThread.start();
#+end_src

#+begin_src pharo
  [self doSomehing] fork
#+end_src

#+begin_src java
  if fullName.isEmpty {
      "Firstname Lastname"
    }
  else {
      fullName
    }
#+end_src

#+begin_src pharo
  fullName isEmpty
  ifTrue:  ['Firstname Lastname']
  ifFalse: [fullName]
#+end_src

**** ranges and each
#+begin_src pharo
  4 timesRepeat: [self dosomething]
  0 to: 100 do: [:i| ... ]
  0 to: 100 by: 3 do: [:i| ... ]
  aCollection do: [:each| ...]
#+end_src

*** 0.6 Messages: Composition and Precedence
unary > binary > keywords

#+begin_example
2 raisedTo: 2 + 1 yourself
#+end_example

*** 0.7 Understanding Messages: Sequence and Cascade

. is a separator, not terminator
; is cascade

these 2 are equivalent
#+begin_example
Transcript clear. Transcript show: 7

Transcript clear; show: 7
#+end_example

and these 2 are equivalent
#+begin_example
|c|
c:= OrderedCollection new.
c add: 1.
c add: 2

OrderedCollection new
add: 1;
add: 2
#+end_example
In the first example, no dot after 1
will confuse Pharo into thinking that the next c is a message to be sent to 1

trying it in Pharo Playground
#+begin_example
Transcript clear
Transcript show: ( OrderedCollection new add: 1; add: 2; yourself )
#+end_example

*** 0.8 Introduction to Blocks

You must remember the dots separating expression

Playground example

#+begin_example
|add2|
add2 := [:x| x+2 ].
add2 value: 4.
#+end_example

** Module 1: Understanding messages
[[https://lms.fun-mooc.fr/courses/course-v1:inria+41031+session01/courseware/e98696571dd44819baa673a0fb29f194/afb8479282aa433d8e4916452b7e2150/1?activate_block_id=block-v1%3Ainria%2B41031%2Bsession01%2Btype%40vertical%2Bblock%40adea1bb07d954755a612a8e419174297#module-1-understanding-messages-child][module link]]

*** Module overview
*** 1.1 Essence of Dispatch: Taking Pharo Booleans as Example

surprise with false

#+begin_example
false not.  -> true
true not.   -> false
true | 1.   -> true
false| 1.   -> 1
#+end_example

*** 1.2 Essence of Dispatch: Let the receiver decide
Nothing new here
*** 1.3 Inheritance Basics
http://rmod-pharo-mooc.lille.inria.fr/AdvancedDesignMooc/Slides/M1-3-Essence-03-Inheritance-Basic.pdf

Object is the root of most classes
Object defines most behaviour of Small Talk system

ProtoObject is Object's superclass
special purpose for raising errors and extending object system with
techniques like proxy objects

two aspects of inheritance during class creation and execution

*** 1.4 Inheritance and Lookup
http://rmod-pharo-mooc.lille.inria.fr/AdvancedDesignMooc/Slides/M1-4-Essence-04-Self.pdf

*** 1.5 About super
*** 1.6 Reification and delegation
[[https://lms.fun-mooc.fr/courses/course-v1:inria+41031+session01/courseware/e98696571dd44819baa673a0fb29f194/faaef2490deb466bb7da6d6acdfd1632/1?activate_block_id=block-v1%3Ainria%2B41031%2Bsession01%2Btype%40vertical%2Bblock%4047f9b29619b94955a0c047b73e8b270f][first concrete case]]

watch it again

*** Companion exercises
they seem to work with Pharo 13 but i am stuck

consider switching to squeak https://wiki.squeak.org/squeak/6546
and download free pdf Squeak By Example 6.0
pdf:/home/jacek/Documents/Manuals/Smalltalk/SBE-6.0.pdf#7

https://wiki.squeak.org/squeak/689
https://squeak.org/documentation/

https://books.pharo.org/

http://rmod-pharo-mooc.lille.inria.fr/AdvancedDesignMooc/2024-04-01-CompanionExercise.pdf

**** Guided Exercises
page 19 (29 of 170) Chapter 5  A basic LAN application
page 79 (89 of 170) Chapter 10 Finding the North with Compass

http://rmod-pharo-mooc.lille.inria.fr/AdvancedDesignMooc/2024-04-01-CompanionExercise.pdf

I had success in Pharo 12 and the tests pass

next to do
5.5
giving up on 5.5 and proceeding with the next module

** Module 2: Test-Driven Design
[[https://lms.fun-mooc.fr/courses/course-v1:inria+41031+session01/jump_to_id/4de31867d97c487f98248fa877c79ac6][module overview]]

*** 2.1 Test 101: The minimum you should know
red error, yellow failure
pay off is huge

good tests tall a story, change rarely

try to turn your tests into specification

*** 2.2 Tests: Why testing is Important?

*** 2.3 Test-Driven Development

*** 2.4 Xtreme Test Driven Development: Getting a productivity boost
TDD on steroids
Do not break the flow

**** Counter example
Counter package
CounterTest class
first test
self assert
Counter class
running test
creating methods on the fly
editing method in the debugger
Supporting the flow

*** TODO 2.5 Parametrized Tests: Getting more tests out of test cases

*** TODO Companion exercises
