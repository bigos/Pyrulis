# -*- Mode: POLY-ORG ;-*- ---
#+Title: Menu Cairo Test
#+PROPERTY: literate-lang lisp
#+PROPERTY: literate-load yes

* Code
This is attempt to rewrite
file:~/Programming/Pyrulis/Lisp/menu-cairo-test.lisp::1
in literate style.

This is attempt to make something more complex than the previous attempt.
file:~/Programming/Pyrulis/Lisp/LiterateLisp/literat.org::8

** running it
In REPL do

#+begin_example
  (ql:quickload :literate-lisp)
  (literate-lisp:with-literate-syntax  (load "~/Programming/Pyrulis/Lisp/LiterateLisp/menu-cairo-test.org"))
  (in-package #:menu-cairo-test)
  (cairo-test)
#+end_example

** Introduction
*** load the libraries
We need gtk4 amd related libraries.

#+begin_src lisp
  (eval-when (:compile-toplevel :load-toplevel :execute)
    (ql:quickload '(:alexandria :serapeum :cl-gtk4 :cl-gdk4 :cl-cairo2 :defclass-std)))
#+end_src

*** cairo-gobject fixes

#+begin_src lisp
  (cl:defpackage cairo-gobject
    (:use)
    (:export #:*ns*))

  (cl:in-package #:cairo-gobject)

    (gir-wrapper:define-gir-namespace "cairo")
#+end_src

*** our package

#+begin_src lisp
  (cl:defpackage menu-cairo-test
    (:use #:cl #:gtk4)
    (:export #:cairo-test))
;; (load "/home/jacek/Programming/Pyrulis/Lisp/menu-cairo-test.lisp")
  (cl:in-package #:menu-cairo-test)
#+end_src


** Drawing
*** struct for colours and macro

#+begin_src lisp
  (cffi:defcstruct gdk-rgba
      (red :double)
    (green :double)
    (blue :double)
    (alpha :double))

(defmacro with-gdk-rgba ((pointer color) &body body)
  `(locally
       #+sbcl (declare (sb-ext:muffle-conditions sb-ext:compiler-note))
       (cffi:with-foreign-object (,pointer '(:struct gdk-rgba))
         (let ((,pointer (make-instance 'gir::struct-instance
                                        :class (gir:nget gdk::*ns* "RGBA")
                                        :this ,pointer)))
           (gdk:rgba-parse ,pointer ,color)
           (locally
               #+sbcl (declare (sb-ext:unmuffle-conditions sb-ext:compiler-note))
               ,@body)))))
#+end_src

*** draw-func environment

**** declare function type for draw-func

#+begin_src lisp
  (declaim (ftype (function (t t t t) t) draw-func))
#+end_src

**** cffi callback

#+begin_src lisp
  (declaim (ftype (function (t t t t) t) draw-func))

  (cffi:defcallback %draw-func :void ((area :pointer)
                                      (cr :pointer)
                                      (width :int)
                                      (height :int)
                                      (data :pointer))
                    (declare (ignore data))
                    (let ((cairo:*context* (make-instance 'cairo:context
                                                          :pointer cr
                                                          :width width
                                                          :height height
                                                          :pixel-based-p nil)))
                      (draw-func (make-instance 'gir::object-instance
                                                :class (gir:nget gtk:*ns* "DrawingArea")
                                                :this area)
                                 (make-instance 'gir::struct-instance
                                                :class (gir:nget cairo-gobject:*ns* "Context")
                                                :this cr)
                                 width height)))
#+end_src

**** draw-func itself

#+begin_src lisp
(defun draw-func (area cr width height)
  (declare (ignore area)
           (optimize (speed 3)
                     (debug 0)
                     (safety 0)))
  (let ((width (coerce (the fixnum width) 'single-float))
        (height (coerce (the fixnum height) 'single-float))
        (fpi (coerce pi 'single-float)))
    (let* ((radius (/ (min width height) 2.0))
           (stroke-width (/ radius 8.0))
           (button-radius (* radius 0.4)))
      (declare (type single-float radius stroke-width button-radius))
      (with-gdk-rgba (color "#000000")
        (cairo:arc (/ width 2.0) (/ height 2.0) radius 0.0 (* 2.0 fpi))
        (gdk:cairo-set-source-rgba cr color)
        (cairo:fill-path))
      (with-gdk-rgba (color "#FF0000")
        (cairo:arc (/ width 2.0) (/ height 2.0) (- radius stroke-width) pi (* 2.0 fpi))
        (gdk:cairo-set-source-rgba cr color)
        (cairo:fill-path))
      (with-gdk-rgba (color "#FFFFFF")
        (cairo:arc (/ width 2.0) (/ height 2.0) (- radius stroke-width) 0.0 fpi)
        (gdk:cairo-set-source-rgba cr color)
        (cairo:fill-path))
      (with-gdk-rgba (color "#000000")
        (let ((bar-length (sqrt (- (expt (* radius 2) 2.0) (expt stroke-width 2.0)))))
          (declare (type single-float bar-length))
          (cairo:rectangle (+ (- (/ width 2.0) radius) (- radius (/ bar-length 2.0)))
                           (+ (- (/ height 2.0) radius) (- radius (/ stroke-width 2.0)))
                           bar-length
                           stroke-width))
        (gdk:cairo-set-source-rgba cr color)
        (cairo:fill-path))
      (with-gdk-rgba (color "#000000")
        (cairo:arc (/ width 2.0) (/ height 2.0) button-radius 0.0 (* 2.0 fpi))
        (gdk:cairo-set-source-rgba cr color)
        (cairo:fill-path))
      (with-gdk-rgba (color "#FFFFFF")
        (cairo:arc (/ width 2.0) (/ height 2.0) (- button-radius stroke-width) 0.0 (* 2.0 fpi))
        (gdk:cairo-set-source-rgba cr color)
        (cairo:fill-path)))))
#+end_src


** GUI
*** menu functions

#+begin_src lisp
(defun menu-test-menu ()
  (let ((menu (gio:make-menu)))
    (let ((submenu (gio:make-menu)))
      (gio:menu-append-item submenu (gio:make-menu-item :model menu :label "Open" :detailed-action "app.open"))
      (gio:menu-append-item submenu (gio:make-menu-item :model menu :label "Exit" :detailed-action "app.exit"))
      (gio:menu-append-submenu menu "File" submenu))
    (let ((submenu (gio:make-menu)))
      (gio:menu-append-item submenu (gio:make-menu-item :model menu :label "About" :detailed-action "app.about"))
      (gio:menu-append-submenu menu "Help" submenu))
    (values menu)))

(defun menu-test-about-dialog ()
  (let ((dialog (make-about-dialog))
        (system (asdf:find-system :cl-gtk4)))
    (setf (about-dialog-authors dialog) (list (asdf:system-author system) "Jacek Podkanski")
          (about-dialog-website dialog) (asdf:system-homepage system)
          (about-dialog-version dialog) (asdf:component-version system)
          (about-dialog-program-name dialog) "Cairo and menu test"
          (about-dialog-comments dialog) "This is a cl-gtk4 test."
          (about-dialog-logo-icon-name dialog) "application-x-addon")
    (values dialog)))

(defun define-menu-actions (window)
  (let ((action (gio:make-simple-action :name "exit"
                                        :parameter-type nil)))
    (gio:action-map-add-action *application* action)
    (connect action "activate"
             (lambda (action param)
               (declare (ignore action param))
               (gtk::destroy-all-windows-and-quit))))
  (let ((action (gio:make-simple-action :name "about"
                                        :parameter-type nil)))
    (gio:action-map-add-action *application* action)
    (connect action "activate"
             (lambda (action param)
               (declare (ignore action param))
               (let ((dialog (menu-test-about-dialog)))
                 (setf (window-modal-p dialog) t
                       (window-transient-for dialog) window)
                 (window-present dialog))))))

#+end_src

*** application

**** define application
Define application is a macro that makes interactive programming possible.

Please note [[*closing bracket of define application][closing bracket of define application]]

#+begin_src lisp
(define-application (:name cairo-test
                           :id "org.bohonghuang.gdk4-cairo-example")
#+end_src

**** main code
#+begin_src lisp
(define-main-window (window (make-application-window :application *application*))
    (setf (window-title window) "Drawing Area Test with Menu")

  (define-menu-actions window)

  (let ((window-box (make-box :orientation +orientation-vertical+
                              :spacing 0)))
    (let ((menu-bar (make-popover-menu-bar :model (menu-test-menu))))
      (box-append window-box menu-bar))
    (let ((area (gtk:make-drawing-area)))
      (setf (drawing-area-content-width area) 200
            (drawing-area-content-height area) 200
            (drawing-area-draw-func area) (list (cffi:callback %draw-func)
                                                (cffi:null-pointer)
                                                (cffi:null-pointer)))
      (box-append window-box area))

    (setf (window-child window) window-box))

  (unless (widget-visible-p window)
    (window-present window)))
#+end_src

This is close the bracket of [[*define application][define application]]. Could it be placed at the end
of previous block? I guess it is a matter of personal taste.

**** closing bracket of define application
#+begin_src lisp
  )
#+end_src
