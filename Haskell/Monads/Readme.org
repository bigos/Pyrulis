* Monads
  This is for experimenting with simple monads

** Tutorials

*** Monads are hard because
https://www.johndcook.com/blog/2014/03/03/monads-are-hard-because/

#+begin_quote
Monads are hard because there are so many bad monad tutorials getting in the way
of finally finding Wadlerâ€™s nice paper.
#+end_quote

The paper itself
http://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf

*** dev.stephendiehl.com
    http://dev.stephendiehl.com/hask/index.html
    http://dev.stephendiehl.com/hask/index.html#eightfold-path-to-monad-satori

*** wiki.haskell.org
    https://wiki.haskell.org/Monads_as_containers
    https://wiki.haskell.org/Monads_as_computation

** Monad components
   There are a few ways to choose the basic set of functions that one can
   perform on these containers to be able to define a monad.

*** basic functions

**** pure
     (return = pure)

**** monadic bind
     (>>=)

*** more natural functions

**** fmap
     a functor map

     We can think of a functor as a type of container where we are permitted to
     apply a single function to every object in the container.

     If you will give me a blueberry for each apple I give you (a -> b), and I
     have a box of apples (f a), then I can get a box of blueberries (f b).

**** pure
     The second method, return, is specific to monads. If m is a monad, then
     return takes an element of type a, and gives a container of type (m a) with
     that element in it.

**** join
     The third method, join, also specific to monads, takes a container of
     containers m (m a), and combines them into one m a in some sensible fashion

**** so from these we have >>=
     we can construct an important operation called bind or extend, which is
     commonly given the symbol (>>=). When you define your own monad in Haskell,
     it will expect you to define just return and bind.

** Simplest example
   https://wiki.haskell.org/Monads_as_containers
   Lists are most likely the simplest, most illustrative example.

**** haskell
     Lists are most likely the simplest, most illustrative example. Here, fmap is
     just the usual map, return is just (\x -> [x]) and join is concat.

**** lisp
     Lists are most likely the simplest, most illustrative example. Here,
     fmap is just the usual mapcar,
     return is just (lambda (x) (list x (1+ x))) and
     join is apply 'append.

     Lispy equivalent of (>>=)
     hs-bind is >>=
     [10,20,30] >>= \x -> [x, x+1]

     #+begin_example
       (>>=) :: (Monad m) => m a -> (a -> m b) -> m b
       xs >>= f = join (fmap f xs)
       -- ma is xs !!> (a -> mb) is f !!> m b is the result
     #+end_example

     #+begin_src lisp
              (defun hs-bind (xs f) (apply 'append (mapcar f xs)))
              (hs-bind (list 10 20 30) (lambda (x) (list x (1+ x))))
              (hs-bind (list (cons 1 'apple) ; swapping apples for blueberries
                             (cons 2 'apple)
                             (cons 3 'apple)) (lambda (x) (list (cons (car x)
                                                                      'blueberry))))
     #+end_src

     Now find example for structure
     https://wiki.haskell.org/All_About_Monads#Introduction_2

     https://www.youtube.com/watch?v=_Gk_lwhJMzk
