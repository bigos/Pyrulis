* Reading fp-made-easier

** HTTP search for GET and POST
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#16
Ajax
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#16
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#1077
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#1084
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#1089

GET
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#1097
POST
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#1107

** Index
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#3

** next reading
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#247
** parts

*** Beginner
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#35

**** 1 Discipline is Freedom
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#36

***** 1.1 Global State
#+begin_quote
Many would argue that Object-Oriented Programming solves these problems.
Unfortunately, it does not. It only hides them.
#+end_quote

***** 1.2 Mutable State

***** 1.2.1 No variables
#+begin_quote
An expression is Referentially Transparent if it can be replaced with its value without
changing the program’s behavior.
#+end_quote

***** 1.2.2 No Loops

***** 1.3 Purity

***** 1.4 Optimization

***** 1.4.1 Memoization
#+begin_quote
Bad designs produce unexpected consequences whereas good designs produce
unexpected benefits.
#+end_quote

We can not memoize impure functions

***** 1.4.2 Compiler Optimization

***** 1.5 Types
1.5.1
1.5.2
1.5.3
1.5.4
1.5.5
1.6

**** 2 Power of functions
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#51

Java could not pass a function as parameter

***** 2.1 Functions as Parameters

***** 2.2 Functions as Return Values

***** 2.3. Higher-order Functions

***** 2.4. Composition
Domain and Codomain -- in programmer speak Input and Output
#+begin_example
(f (g x)) ; Lisp
f ∘ g (x)
This is spoken as f COMPOSED WITH g APPLIED TO x.
#+end_example

composition and no parameters
#+begin_src purescript
                     -- without composition
  intToStringArray :: Int -> Array String
  intToStringArray n = toArray (toString n)
                       -- with composition
  intToStringArray :: Int -> Array String
  intToStringArray = toArray <<< toString
#+end_src

PureScript also provides the >>> operator when we want to compose in the
opposite direction. This is usually done because the code may read better.
2.4.1. Point-free Notation
#+begin_quote
Point-free notation (or style) means that a Function is defined WITHOUT explicitly
mentioning one or more of its Parameters.
#+end_quote

#+begin_src purescript
  -- with arguments
  zeroPad :: Int -> String -> String
  zeroPad size s = (padLeft '0') size s
  -- poinfree
  zeroPad :: Int -> String -> String
  zeroPad = padLeft '0'
#+end_src

***** 2.5 Currying
lambda calculus as purescript
#+begin_src purescript
  λx. x + 1
  -- In PureScript, we’d write this as:
  \x -> x + 1
#+end_src

currying transforms lambdas
#+begin_src purescript
  \x y -> x + y
  -- and turns it into a Function like:
  \x -> \y -> x + y
#+end_src

similar in lisp
#+begin_src lisp
  (funcall (funcall  (lambda (x) (lambda (y) (list :res x y))) 1) 2)
#+end_src

All Type Signatures have implied Parentheses that are Right-Associative, i.e. associates to the right:
Here we have examples with explicit parentheses
#+begin_src purescript
  add :: Int -> (Int -> Int)
  add x y = x + y
            -- or with 3 arguments
  add3 :: Int -> (Int -> (Int -> Int))
  add3 x y z = x + y + z
#+end_src

how signature changes on adding parameters
#+begin_src purescript
  add3 :: Int -> Int -> Int -> Int
  add3 x y z = x + y + z
  -- When we call add3 with one Parameter:
  add3 1 :: Int -> Int -> Int
  -- x is bound to 1. When we call that resulting Function with one Parameter:
  (add3 1) 2 :: Int -> Int
  -- y gets bound to 2. Calling that resulting Function with one Parameter:
  ((add3 1) 2) 3 :: Int
#+end_src

2.5.1. Partial Application
#+begin_quote
Partial Application is when a Function is called with fewer than all of its Parameters.
#+end_quote

When we think of Functions having multiple Parameters, then Partial Application makes sense. However,
when we think of Curried Functions, there is no such thing as Partial Application since there’s only one
Parameter.

I like to think of Partial Application as configuring a more general Function.
We’re sort of baking in the configuration Values.

JP Adding subsequent parameters specialises the final function
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#71

It’s worth spending some time planning the order of your Parameters for this very reason.

#+begin_quote
The general rule for Parametric Order is to have the Parameters that change the least be
the leftmost ones and the ones that change the most to be rightmost.
#+end_quote

**** 3 The Basics of PureScript
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#72

***** 3.1 Types
Most of PureScript’s code is open source and can easily be perused via the
GitHub repositories, but the implementation for Primitive Types are built into
the compiler, which is written in Haskell.
3.1.1. Javascript Primitives
The following Primitive Types map directly to Javascript’s types:
• Boolean
• Char
• String
• Number

***** 3.1.2 Purescript Primitives
These are the PureScript-specific primitives, i.e. they don’t map directly to Javascript’s types:
• Int
• Array
• Record

Nested Array
#+begin_src purescript
aa :: Array (Array Int)
aa = [ [1, 2, 3], [4, 5], [6, 7, 8, 9] ]
#+end_src

Record
#+begin_src purescript
  -- declaration
  r :: { firstName :: String, lastName :: String }
  -- construction
  r = { firstName: "Joe", lastName: "Mama" }
#+end_src

Difference from Elm

To create a Record, we use the following syntax:
#+begin_src purescript
person = { name: "Candy Cane", age: 37 }
#+end_src

To modify a one or more elements in the Record and return a new Record (remember,
all Values are immutable), we use the following syntax:

#+begin_src purescript
newPerson = person { name = "Randy Cane" }
#+end_src

This is the ONLY time an equal sign is used in Record syntax. All other times, a
colon is used.

***** 3.1.3. User Types
PureScript comes with many useful built-in Types but without the ability to make
your own Types, you won’t be able to model your problem domain. PureScript has
the following facilities for defining your own Types:

In PureScript, Data Types and Data Constructors always start with an uppercase
letter, whereas variables start with a lowercase letter or an underscore:

****** Type Alias
like Elm type alias
#+begin_src purescript
    type Id = String
    type Message = { id :: Id, payload :: String }
                   -- but this allows shortcut for more complex type signatures
    type MessageHandler = Message -> Result
    -- so we can have type signature
    handler :: MessageHandler
             -- instead of
    handler' :: Message -> Result
#+end_src

****** Data Type
#+begin_src purescript
data MyType = MyType
#+end_src
Here we define a type and its constructor

The namespace for Data Types and Data Constructors are separate so there is no
name collision here.

****** Algebraic Data Types
If the calculation involves a multiplication then it’s a Product Type. If it
involves addition then it’s a CoProduct Type or Sum Type.

In Math, the prefix *co* is added to mean the opposite (Domain, Codomain, Sine,
Cosine, Tangent, Cotangent, etc.).

******* Product Type
Product types are data types, defined through more than just one constructor as
in tuples or records

my guess
#+begin_src purescript
  data Season = Spring | Summer | Autumn | Winter
  data Boolish = (Bool, Season)
#+end_src

Here we multiply 2 booleans times 4 Season values, getting 8 combinations.

also see [[*Product Types - with parameters][Product Types - with parameters]]

******* Coproduct or Sum Type
#+begin_src purescript
data Bool = True | False
#+end_src

******* type variables
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#80

******* Polymorphic vs Monomorphic
monomorphic takes no type parameters, polymorphic is a declaration with type
parameters

******** Product Types - with parameters
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#81
#+begin_src purescript
data Triplet a b c = Triplet a b c
#+end_src

Here we have a 3 Polymorphic Type Parameters, a, b and c.
The Data Constructor, Triplet has the implied Type:
#+begin_src purescript
Triplet :: a -> b -> c -> Triplet
#+end_src

Let’s create a Triplet:
#+begin_src purescript
type StringStats = Triplet String Int Int
getStats :: String -> StringStats
getStats s = Triplet s (length s) (vowelCount s)
#+end_src

StringStats simultaneously contains 1 String and 2 Integers. That’s what makes it a Product Type. It contains a String AND an Int AND another Int.

In sets, this corresponds to Intersection. The intersection of Set A and Set B
contains elements that are contained in A AND contained in B.

******* Isomorphic
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#83

Comparing our Triplet to StringStats:
#+begin_src purescript
data Triplet a b c = Triplet a b c
data StringStats = StringStats
{ string :: String
, length :: Int
, vowelCount :: Int
}
#+end_src

StringStats and Triplet both contain the same information. The big difference is
the fact that Triplet is more flexible since it can take any types a, b and c,
whereas StringStats takes very specific types String, Int and Int: They’re
almost the same, but let’s work to make them closer. First, let’s make a
specialized version of Triplet:
#+begin_src purescript
data StringTriplet = StringTriplet String Int Int
data StringStats = StringStats
{ string :: String
, length :: Int
, vowelCount :: Int
}
#+end_src
Now StringTriplet and StringStats have exactly the same types.

#+begin_quote
Two Types, T1 and T2, are Isomorphic (Iso means equal and morph means shape) if a
Function can be written from T1 to T2 and from T2 to T1 without any loss of information.
#+end_quote

******** Inhabitants
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#84

The NO information loss part of Isomorphisms is very important. At first glance,
you might think String and Int are Isomorphic since any Int can be converted
into a String. But not any String can be converted into an Int.

Types are similar to Sets, except where Sets have Elements, Types have
Inhabitants. And there are far more Inhabitants of String than Int even though
they both have an Infinite number of Inhabitants.

Let’s imagine a Type that only contains the numbers 42 and 79 and let’s call it
TwoNum. Because this has two inhabitants, it makes it Isomorphic to Boolean
since it also has two inhabitants, true and false.

#+begin_quote
Any two types with an equal number Inhabitants are Isomorphic.
#+end_quote

****** New Type
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#87

progressing with fullName function
starting the signature with String parameters
#+begin_src purescript
  fullName :: String -> String -> String -> String
#+end_src
we can see the problem with this approach where we will not get type warning
when we confuse the order of parameters

then trying type aliases
#+begin_src purescript
type FirstName = String
type MiddleName = String
type LastName = String
fullName :: FirstName -> MiddleName -> LastName -> String
#+end_src
but the type aliases are only helpful when the programmer reads them

so let's try unique types for each parameter
*New Types*
#+begin_src purescript
data FirstName = FirstName String
data MiddleName = MiddleName String
data LastName = LastName String
data FullName = FullName String
fullName :: FirstName -> MiddleName -> LastName -> FullName
#+end_src

Now let’s call our Function with our new Types:
#+begin_src purescript
-- COMPILER ERROR!
fullName (LastName "Smith") (MiddleName "Jay") (FirstName "John")
#+end_src
We called fullName with the Parameters in the wrong order again. But this time,
we get a compiler error because even though FirstName and LastName both take
Strings, they are not the same Type anymore.

This technique just wraps a Type inside of another Type. In our case, we wrapped
our String in another Type which made it unique. We essentially made a new Type
for each String in our original Function.

PureScript has a special keyword for this approach called newtype:
#+begin_src purescript
newtype FirstName = FirstName String
newtype MiddleName = MiddleName String
newtype LastName = LastName String
newtype FullName = FullName String
fullName :: FirstName -> MiddleName -> LastName -> FullName
fullName (FirstName first) (MiddleName middle) (LastName last) =
FullName (first <> " " <> middle <> " " <> last)
#+end_src
data has been replaced with newtype

The newtype keyword tells the compiler that we’re just making a new Type for
another Type, e.g. FirstName is a new Type for String. That means that the
compiler can do some optimizations if it knows that it’s just a simple wrapper.

But it can only do these optimizations if certain restrictions are imposed:
• newtypes must only have 1 Data Constructor
• The Data Constructor can only take 1 Parameter

There will be more about the newtypes discussed in *typeclasses*

***** 3.1.4. Common Library Types
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#89

****** Void
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#89
In Type Theory, there’s the concept of Void Type, which is a Type with Zero
Inhabitants. In PureScript (and Haskell) this Type is called Void.

#+begin_src purescript
  data Void = Void Void
#+end_src
We create data type Void using type constructor Void with Void parameter

****** Unit
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#91

In Set Theory, there’s the concept of a Unit Set that has exactly 1 element.

****** Maybe
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#91

****** Either
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#96
The Either Type is another failure Type, like Maybe, except it has the added
benefit of having a reason for the failure

#+begin_src purescript
case result of
Left errorCode -> "The error code is: " <> show errorCode
Right count -> "The number of rows returned is: " <> show count
#+end_src

****** Maybe vs Either
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#98

#+begin_src purescript
data Maybe a = Just a | Nothing
data Either a b = Left a | Right b
#+end_src

Remember that Maybe is a Sum Type, so we need to add the inhabitants of all of
the Data Constructors. The inhabitants of Maybe is a for Just a and 1 for
Nothing, therefore the number of inhabitants is a + 1. And for Either, which is
also a Sum Type, we have a for Left and b for Right or a + b inhabitants.

****** Tuple
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#101

****** Either vs Tuple
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#102

Special case where Tuple and Either are Isomorphic and have equal inhabitants,
but is useless in practice

****** List
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#103

***** 3.2. Pattern Matching
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#105

***** 3.2.1. Case Expression
#+begin_src purescript
  -- case version
  isNothing :: ∀ a. Maybe a -> Boolean ❷
  isNothing m = case m of
    Nothing -> true
    _ -> False
  -- more idiomatic
  isNothing :: ∀ a. Maybe a -> Boolean
  isNothing Nothing = true
  isNothing _ = false
#+end_src

***** 3.2.2. String Patterns
gotcha in pattern matching from strings to booleans, because string pattern
matching is sensitive

***** 3.2.3. Array Patterns

***** 3.2.4. List Patterns
use of Cons operator

***** 3.2.5. Array vs List
Pattern Matching an Array, requires you to know its exact size. You’re also
forced to deal with all the parts of the Array all at once:

With Lists, we can write Functions that deal with any length List and when we do,
we can work with just the head and then recurse to continue with the tail of the
list

***** 3.2.6. Record Patterns
The syntax for accessing Records in PureScript uses the same dot-notation that
you see in many other languages.

But unlike Javascript, you cannot create an accessor at runtime.

see Record Pun
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#110

and descending down the structure in isCalifornia

first time Row Type mentioned
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#111

***** 3.3. Logical Control
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#112

***** 3.3.1. If-Then-Else Expression

***** 3.3.2. Case Expression

***** 3.3.3. Pattern Matching
Pattern Matching is very similar to using case:

***** 3.3.4. Guards
Guards are a way to specify *if* logic in a concise and readable manner. The
syntax is a bit strange when first encountered:

#+begin_src purescript
  keepPositive :: Int -> Int
  keepPositive x
    | x < 0 = 0
    | otherwise = x
#+end_src

We can mix guards and case expressions
#+begin_src purescript
  keepModernIfYoung :: Int -> ContactMethod -> ContactMethod
  keepModernIfYoung age preferredContactMethod =
    case preferredContactMethod of
      Phone -> Phone
      Email -> Email
      Fax | age < 40 -> Email
          | otherwise -> Fax
  --
  noBiggerThan10 :: Maybe Int -> Int
  noBiggerThan10 x = case x of
                          Just x | x > 10 -> 10
                                 | otherwise -> x
                          Nothing -> 0
#+end_src

***** 3.4. Lambda Functions
We can name lambdas like in Scheme
#+begin_src purescript
f :: Int -> Int
f = \x -> x + 1
#+end_src
which is the same as normal function definition

We can freely move Parameters across the equals sign as long as we move the rightmost Parameter first
and maintain the correct order:
#+begin_src purescript
f1 x y z = x + y + z
f2 x y   = \z -> x + y + z
f3 x     = \y z -> x + y + z
f4       = \x y z -> x + y + z
#+end_src

***** 3.5. Wildcards
So far, we’ve seen _ used as a "don’t-care" variable.
There are other times when it’s used as a Wildcard.

***** 3.5.1. Case Expression
Two equivalent functions, using point-free to avoid naming a variable
#+begin_src purescript
keepModernIfYoung' age = case _ of
keepModernIfYoung' age = \someNameIHaveToThinkOf ->
case someNameIHaveToThinkOf of
#+end_src

***** 3.5.2. Operator Sections

#+begin_src purescript
filter (\x -> x < 10) [1,2,3,10,20,30] -- [1,2,3]
filter (_ < 10) [1,2,3,10,20,30] -- [1,2,3]
filter (10 <= _) [1,2,3,10,20,30] -- [10,20,30]
#+end_src

The following are also valid Operator Sections:
#+begin_src purescript
(_ <> "suffix") -- append the string "suffix"
(_ / 10)        -- div by 10
(10 / _)        -- div into 10
(_ == _)        -- equal check
#+end_src

***** 3.5.3. Records
Wildcards can be using in Records:
#+begin_src purescript
  \name age -> {name: name, age: age}
  -- wildcard equivalent of previous line
  { name: _, age: _ }
#+end_src


***** 3.6. Bindings
We have 2 ways to bind Values to variables. (Don’t forget, Functions are also Values in Functional
Programming.)

***** 3.6.1. Where
The keyword where allows us to define things after the fact in a Function definition:

#+begin_src purescript
  multSum :: Int -> Int -> Tuple Int Int
  multSum x y = Tuple mult sum
    where
      mult = x * y
      sum = x + y
#+end_src

#+begin_src purescript
#+end_src

***** 3.7. Binary Operators
We’ve seen Binary Operators in action but we failed to define them.
#+begin_quote
A Binary Operator is an Operator represented by a Symbol that is a Function of 2
Parameters. The Value on the lefthand side of the Operator is the first Parameter and the
Value on the right is the second.
#+end_quote
Let’s look at an example:
#+begin_src purescript
  data List a = Nil | Cons a (List a)
  append :: ∀ a. List a -> List a -> List a
  append xs Nil = xs
  append Nil ys = ys
  append (Cons x xs) ys = Cons x (append xs ys)
  infixr 5 append as <>
  -- declare append as <> which is right associated operator of priorit 5
#+end_src

***** 3.7.1. Associativity
There are 3 types of Associativity for Binary Operators:
• infixr = Right-Associative
• infixl = Left-Associative
• infix = None

***** 3.7.2. Precedence

***** 3.7.3. Fixity
infix means Infixed Operator, i.e. it comes between its two values:
#+begin_src purescript
l1 <> l2
-- Compare that with the Prefixed equivalent:
append l1 l2
#+end_src

We can use an Infixed Operator in Prefixed Position and we can use a Function in Infixed Position:
#+begin_src purescript
(<>) l1 l2
l1 `append` l2
#+end_src

***** 3.8. Comments
We’ve seen inline comments up to this point, e.g.:

Block comments can be accomplished as follows:
#+begin_src purescript
{-
This Function will add two numbers
and return the answer, which is
the addition of those two numbers.
-}
add :: Int -> Int -> Int
add x y = x + y -- add 2 numbers
#+end_src

***** 3.9. Inferring Functionality from Type Signatures
All Functions have Type Signatures whether defined explicitly by the developer or determined implicitly by
the compiler based on how the developer uses the Parameters.
Best practices deems that at least all top-level Functions in a module have explicit Type Signatures.
Not only does this help by improving the readability of the codebase, but it helps the compiler to produce
better error messages. But Type Signatures aren’t just helpful to the compiler. We can imply a lot from just a
Type Signature.
Take the following Type Signature:
#+begin_src purescript
f :: Int -> Int -> Int
#+end_src
Take a guess at what kind of Function f might be.

But what about more abstract Type Signatures such as:
#+begin_src purescript
f :: ∀ a. a -> a
#+end_src

#+begin_quote
A Partial Function is one where all of the cases are not handled. A Total Function is one
where all possible calling scenarios have been accounted for. PureScript discourages
Partial Functions.
#+end_quote

tips for making a partial function total

***** 3.10. Summary
We’ve learned a lot in this Chapter about some of the basic parts of PureScript from Types to common
language constructs. There will be more to come. And while theory is important, getting some hands on
experience can help cement that theoretical understanding.

You will probably find yourself returning to this Chapter as you work out the coming exercises. Now it’s
time to get our hands dirty.

**** Chapter 4. Installing PureScript
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#133

Of all the Chapters of this book, this one will become obsolete the fastest.
That’s because in the software world things change constantly.

The tools I’m going to suggest are the best ones that I know of at the time of
this writing and I expect that they will be around for at least the next 5 years.

If you’re reading this around 2025 or after, you may want to check to see if
there are newer/better tools than I’m suggesting here. Even then, I’d suggest
you still read through this to make sure you’re getting all of the same features
and capabilities.

***** 4.1. Compiler and Tools
still the same
***** 4.1.1. Installing Node
***** 4.1.2. Create Project
https://github.com/purescript/documentation/blob/master/guides/Getting-Started.md

specific version
#+begin_example
npm install --save-dev spago@0.20.0 purescript@0.14.1
#+end_example
***** 4.1.3. Initialize PureScript Project
The final step is to initialize this project for building a PureScript program using spago:
***** 4.1.4. A Second Project
While this seems like a lot to do to get up and running, most of it was first-time configuration.
To start a second project involves:
#+begin_example
# make project directory
mkdir /dev/purescript/second-project
# enter project
cd /dev/purescript/second-project
# initialize for using `npm` and `npx`
npm init -y
# add compiler and build tools to the project
npm install --save-dev spago@0.20.0 purescript@0.14.1
# initialize our `git` repo (Optional)
git init
# create a skeleton PureScript project
npx spago init
# build and run the skeleton project
npx spago run
#+end_example
***** 4.2. Editor and Plugins
***** 4.2.1. Install Extensions
***** 4.2.2. Configure Extensions
***** 4.2.3. Configure Editor
**** Chapter 5. Basic Coding in PureScript
Reading a book can lull us into the false sense that we understand what we’ve read. This happens to me,
especially in programming. We understand it as it’s being explained, but we haven’t fully understood it
until we’ve utilized it.

So that’s what the exercises are for. And if you’re like me and tend to skip exercises in books, please do not.
There’s more to these exercises than meets the eye.

Many concepts will get introduced in the exercises. Many commonly used library Functions will also be
introduced during this process. You will also learn how to program, and more important, think in a
Functional way using PureScript.

pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#144

***** 5.1. Prelude

selective import and hiding
#+begin_src purescript
import Prelude hiding (identity)
import AnotherModule (identity, doSomething) -- selective import of two functions
id = identity
#+end_src

#+begin_quote
It is considered good practice to explicitly specify all Functions that are
imported from modules. In small programs, you can get away with not doing this,
but as your codebase grows, it becomes increasingly difficult to determine where
Functions have been imported from. The only exception to this rule is Prelude.
#+end_quote

#+begin_src purescript
import Prelude
import AnotherModule (doSomething)
import AnotherModule as AM
id = AM.identity
#+end_src

***** 5.2. Exercise Program
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#146

Main and Ch5
https://github.com/bigos/purescript_exercises

file:~/Programming/PureScript/purescript_exercises/

file:~/Programming/PureScript/purescript_exercises/src/Ch5.purs::1

#+begin_example
npx spago run
#+end_example

***** 5.3. Pursuit
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#146

Website for finding function definitions
https://pursuit.purescript.org/

***** 5.4. Writing flip
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#148

file:~/Programming/PureScript/purescript_exercises/src/Ch5.purs::1

***** 5.4.1. Hint for flip
***** 5.4.2. Code for flip
***** 5.4.3. Alternative Coding for flip
***** 5.5. Writing const
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#151

[[file:~/Programming/PureScript/purescript_exercises/src/Ch5.purs::const x _ = x]]

***** 5.6. The Apply Operator ($)
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#153

***** 5.7.1. Hint for ($)
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#155

***** 5.7.2. Code for ($)
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#155

***** 5.8. Writing the Apply Flipped Operator (#)
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#156

***** 5.8.1. Code for applyFlipped and (#)
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#157

***** 5.9. Preparing to Write Data.List Functions
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#161

The remainder of the Functions we’ll write in this chapter will be from Data.List.
We’ll need to selectively import from Data.List so we don’t have to write everything.

***** 5.10. Why Data.List and not Data.Array
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#164

The List type is written totally in PureScript, whereas Array leverages the low-
level Javascript Functions for Arrays.

***** 5.11. Writing singleton - skipping the rest of chapter 5 for now
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#164


*** Intermediate
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#234

**** Chapter 6. Typeclasses
The concepts we’ve learned so far are sufficient for you to dive into Elm or
functional Javascript. But there are abstractions that you’ll miss out on that
will reduce boilerplate code, e.g. JSON decoding. With both Haskell and
PureScript, the compiler can generate code for us greatly reducing our need to
write boilerplate code. Also, with higher level abstractions, we don’t have to
reinvent the wheel over and over again.

***** 6.1. The Problem
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#235

Types in functional programming do not have inheritance!

Description of explosion of functions needed to write

***** 6.2. The Solution
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#241

When we want to treat different things similarly in languages such as C# or Java,
we use Interfaces

#+begin_src java
  // Java
  public interface HasAddress {
      Address getAddress();
  }
#+end_src

let's create Typeclass
#+begin_src purescript
  class HasAddress a where
    getAddress :: a -> Address
#+end_src
We use class keyword to create Typeclass with one type parameter a
getAddress is one of the all functions that must be implemented to create the instance of Typeclass

So let's create an instance
#+begin_src purescript
  instance hasAddressPerson :: HasAddress Person where
    getAddress (Person p) = p.address
#+end_src
here Person is the type parameter for HasAddress that corresponds to a in the Typeclass definition

various examples
#+begin_src purescript
  --Here are those Instances:
  instance hasAddressCompany :: HasAddress Company where
    getAddress (Company c) = c.address
  -- case of multiple pattern matched versions
  instance hasAddressResidence :: HasAddress Residence where
    getAddress (Home address) = address
    getAddress (Facility address) = address
  instance hasAddressEmptyLot :: HasAddress EmptyLot where
    getAddress (EmptyLot l) = l.address
#+end_src

***** 6.3. Constraints
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#243

single constraint
HasAddress is a Typeclass constraint for a
#+begin_src purescript
  getDirections :: ∀ a. HasAddress a => a -> Directions
  getDirections hasAddr = let address = getAddress hasAddr in
    -- the rest
#+end_src

multiple constraints
Type a must be and instance of *BOTH* Show and HasAddress
#+begin_src purescript
  -- zzzzzzzzzzzzzzzzzz --constrainsts----------- zzzzzzzzzzzzzz
  getDirections :: ∀ a. Show a => HasAddress a => a -> Directions
  getDirections hasAddr = let address = getAddress hasAddr in
    -- the rest
#+end_src

alternative syntax for multiple constraints preferred for one line signatures
#+begin_src purescript
  -- zzzzzzzzzzzzzzzzzz --constrainsts----------- zzzzzzzzzzzzzz
  getDirections :: ∀ a. (Show a, HasAddress a) => a -> Directions
  getDirections hasAddr = let address = getAddress hasAddr in
    -- the rest
#+end_src

typeclass, data, instance, implementation
#+begin_src purescript
  class HasAddress a where
        getAddress :: a -> Address

  data Person = Person
   { name :: String
   , age :: Int
   , address :: Address
   }

  -- instance for Person type
  instance hasAddressPerson :: HasAddress Person where
    getAddress (Person p) = p.address

  getDirections :: ∀ a. HasAddress a => a -> Directions
  getDirections hasAddr = let address = getAddress hasAddr in
  -- ...
#+end_src

With Typeclasses, we have an easy way to treat disperate Types in a similar way
without having to create a Sum Type. There’s also no need for case expressions.
The compiler makes the determination of which Type we’re referring to
at COMPILE-TIME.

***** 6.4. Typeclass Requirement
Every Typeclass function is called a Method:

#+begin_src purescript
  instance hasAddressPerson :: HasAddress Person where
    getAddress (Person p) = p.address
#+end_src

getAddress is the one and only Method of Typeclass HasAddress.

There is a requirement for Typeclasses that may not be obvious at first blush.

#+begin_quote
Every Typeclass Method must have its Polymorphic Parameter in its Type Signature.
#+end_quote

The reason for this is because calling getAddress isn’t enough information to
determine which getAddress to call since many Types can be instances of
HasAddress. The compiler needs a Type to determine which getAddress to call.

***** 6.5. Built-in Typeclasses
In PureScript, there are many built-in Typeclasses. Most of the ones we’re going
to look at have equivalent, if not identical, versions in Haskell.

***** 6.5.1. Eq Typeclass
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#247

*** Advanced
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#543

*** Beyond
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#1000
