* Things I did not know

** multi-line comments
pdf:/home/jacek/Documents/Manuals/Elm/Elm_in_Action.pdf#30

#+begin_example
> 1 + 2 {- in comment -} + 3
6 : number
#+end_example

** REPL prototyping and let

Following source example
#+begin_src elm
  withoutDashes str =
      let
          dash =
              '-'
          isKeepable character =
              character /= dash
      in
          String.filter isKeepable str
#+end_src

can be tried in REPL like this:
#+begin_example
> dash = '-'
> isKeepable character = character /= dash
> withoutDashes str = String.filter isKeepable str
#+end_example

The difference is that REPL version uses global scope for dash and isKeepable.

** lambda and function equality
These are equivalent

#+begin_src elm
isKeepable char = char /= '-'
isKeepable = \char -> char /= '-'
#+end_src

** infix and prefix operators
These are equivalent.

Operator precedence applies only to infix style calls.

#+begin_src elm
  7 - 3 == 4
(-) 7 3 == 4

3 + 4 == 8 - 1
(==) ((+) 3 4) ((-) 8 1) -- this is almost lispy
#+end_src

** record creation

#+begin_src elm
catLover = { name = "Li", cats = 2 } -- assigns a record to the name
-- catLover. Once assigned, names cannot be reassigned.
{ catLover | cats = 3 } -- returns a new record, based on catLover with new value cats set to 3
#+end_src

This is pattern seen in update.

** Tuple destructuring
Tuples have commas, functions in with arguments in brackets don't
Tuples can have max 3 records.

#+begin_src elm
multiply3d ( x, y, z ) = x * y * z -- Destructuring a tuple into three named values: x, y, and z
multiply3d ( 6, 7, 2 )
#+end_src

** Why we have commas first in Elm?
Because it is easier to spot missing commas. In Elm a missing comma can still
produce a syntactically valid code.

** import Module exposing(f1, f2)
We could have achieved essentially the same result by assigning them names
directly:

#+begin_src elm
import Html
div = Html.div
h1 = Html.h1
img = Html.img
text = Html.text
#+end_src

However, since this pile of code can be replaced by a single line
#+begin_src elm
import Html exposing (div, h1, img, text)
#+end_src

it’s normal to use exposing for this purpose instead.

** classList
https://package.elm-lang.org/packages/elm/html/latest/Html-Attributes#classList

** Arrays have no literal syntax
** Lists perform better than Arrays
in typical use cases

** Arrays are better for arbitrary position access

** Annotating functions with type variables
DEFINITION A type variable represents more than one possible type. Type vari-
ables have lowercase names, making them easy to differentiate from concrete
types like String, which are always capitalized.

NOTE
Elm has three type variable names that have special meanings—
number, appendable, and comparable—which we’ll dive into later. For
now, avoid choosing any of those as your type variable names.


#+begin_src elm
  -- here the String is concrete type
  myfn1 : List String
  myfn1 = ["one", "two", "three"]

  -- here the elementType is type variable, we could use one letter like a
  myfn2 : List elementType -> Array elementType
  myfn2 d = Array.fromList d

  -- my imaginary function with type variables
  myfn3 : List a -> (a -> b) -> List b
  myfn3 ls fn = List.map fn ls
#+end_src

** Exposing imported types
If we do not expose ~Array~ the function signature would have to be more verbose

#+begin_src elm
photoArray : Array.Array { url : String }
#+end_src

** Function Signatures
All elm functions support currying, so Elm adds brackets to the signature behind the scenes.
#+begin_src elm
  String.padLeft : Int -> Char -> String -> String
  -- equals
  String.padLeft : Int -> (Char -> (String -> String))
#+end_src

** Quick function search
Searching for ~ : ~ in Emacs gives a grep list of record types and functions with their signatures.

** Elm Commands
DEFINITION A command is a value that describes an operation for the Elm
Runtime to perform. Unlike calling a function, running the same command
multiple times can have different results.

and the AHA! moment with the Figure 3.7 pn page 79 (100)

** Type variables are for
concrete types that have not been specified yet`

** Non empty lists
Similarly, a function can “return a non-empty list” by returning
an ( elem, List elem ) tuple. where we have tuple of the head and rest

Pattern matching as in
#+begin_src elm
Loaded (firstPhoto :: otherPhotos) _ ->
#+end_src
matches in a way where we can use it when we need arguments of a guaranteed non empty lists

that comes handy in case zzz of like this:
#+begin_src elm
                Loaded (firstPhoto :: otherPhotos) _ ->
                    ( model
                    , Random.generate GotRandomPhoto (Random.uniform firstPhoto otherPhotos)
                    )

                Loaded [] _ ->
                    ( model, Cmd.none )
#+end_src

** pipelines
Different variants of (model, CmdAction) like Cmd.none |> Tuple.pair model
#+begin_src elm
            case model.status of
                Loaded (firstPhoto :: otherPhotos) _ ->
                    -- ( model
                    -- , Random.generate GotRandomPhoto (Random.uniform firstPhoto otherPhotos)
                    -- )
                    -- or
                    -- Tuple.pair model
                    --     (Random.generate GotRandomPhoto (Random.uniform firstPhoto otherPhotos))
                    -- or
                    Random.uniform firstPhoto otherPhotos |> Random.generate GotRandomPhoto |> Tuple.pair model
#+end_src


** calling update
Calling update does not directly alter any state. All update does is return a
tuple. Updates are performed by the Elm Runtime.
