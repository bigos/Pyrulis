* Readme

This folder is for reading this book
https://cs3110.github.io/textbook/chapters/preface/about.html

** Ocaml manual
https://v2.ocaml.org/manual/index.html

** quotes

*** clarifying and simplyfying

https://cs3110.github.io/textbook/chapters/intro/future.html

#+begin_quote
If after OCaml you want to learn more about functional programming, youâ€™ll be
well prepared. OCaml does a great job of clarifying and simplifying the essence
of functional programming in a way that other languages that blend functional
and imperative programming (like Scala) or take functional programming to the
extreme (like Haskell) do not.
#+end_quote

** notes
*** equality
structural vs physical

|            | structural | physical |
|------------+------------+----------|
| equality   | =          | ==       |
| inequality | <>         | !=       |
https://cs3110.github.io/textbook/chapters/basics/expressions.html#more-operators

*** functions
**** recursion with rec keyword
https://cs3110.github.io/textbook/chapters/basics/functions.html#

**** mutually recursive functions

**** pipeline
#+begin_example
5 |> inc |> square
#+end_example

**** keyword arguments
#+begin_example
let f ~name1:name1 ~name2:name2 = name1 + name2
let f ~name1 ~name2 = name1 + name2
let f ~name1:(arg1 : int) ~name2:(arg2 : int) = arg1 + arg2
#+end_example

**** optional arguments
#+begin_example
let f ?name:(arg1=8) arg2 = arg1 + arg2
#+end_example

**** tail call recursion recipe

*** debugging
https://cs3110.github.io/textbook/chapters/basics/debugging.html#debugging-in-ocaml

https://ocaml.org/docs/debugging#The-OCaml-debugger

assert invalid_arg failwith
** next reading

https://cs3110.github.io/textbook/chapters/data/intro.html
