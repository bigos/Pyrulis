* Readme

https://ocaml.org/docs/installing-ocaml

#+begin_example
  sudo apt install opam
  opam init -y
#+end_example

Run the command at the end of the output of the last command

run ~opam init~
and answer ~y~ to the question about bash profile, then restart terminal

** Install platform tools
#+begin_example
opam install dune ocaml-lsp-server odoc ocamlformat utop merlin base core core_bench
#+end_example

** Emacs environment problem
Emacs REPL will not work on my system unless I set the environment variables

For now, in the *scratch* buffer I execute the following
#+begin_src emacs-lisp
    (setenv  "CAML_LD_LIBRARY_PATH"
          "/home/jacek/.opam/default/lib/stublibs:/home/jacek/.opam/default/lib/ocaml/stublibs:/home/jacek/.opam/default/lib/ocaml")
#+end_src

*** alternative way of launching Emacs
If you are using OPAM it should be enough to execute Emacs under the OPAM environment (eg opam exec -- emacs or eval $(opam env)).


**** keep testing that
[[file:~/Programming/OCaml/ocaml_experiments/README.org::*correct way to run Emacs so it sees the libraries][correct way to run Emacs so it sees the libraries]]
open Terminal and cd to dune project
dune project folder should have file dune-project
in bin folder, in file dune, add the required libraries to the libraries section

in that folder run:
dune build
opam exec -- emacs

Emacs should have the auto-completion with the required library

** other environment variables
file:~/.opam/opam-init/variables.sh::1

** check installation
https://ocaml.org/docs/installing-ocaml#check-installation

** .ocamlinit file
https://www.mancoosi.org/~abate/ocamlinit.html

On start-up (before the first phrase is read), if the file .ocamlinit exists in
the current directory, its contents are read as a sequence of Objective Caml
phrases and executed as per the #use directive described in section 9.2. The
evaluation outcode for each phrase are not displayed. If the current directory
does not contain an .ocamlinit file, but the userâ€™s home directory (environment
variable HOME) does, the latter is read and executed as described below.

For now I will not use ocamlinit file, but will use comments on top of main.ml
file with use and require that will be selected and evaluated with C-c C-r

#+begin_example
#use "topfind";;
#require "stdio";;
#+end_example

*** trying to find better recomendations
https://discuss.ocaml.org/t/how-to-get-an-ocamlinit-file-per-switch-project/3114

https://github.com/mads-hartmann/ocaml-utop-emacs-example/blob/master/.ocamlinit

*** this may not always be a good idea
http://dev.realworldocaml.org/install.html

#+begin_example
#require "core.top";;
#require "ppx_jane";;
open Base;;
#+end_example

** toplevel
https://ocaml.org/manual/5.2/toplevel.html

** tour
https://ocaml.org/docs/tour-of-ocaml

https://borretti.me/article/two-years-ocaml

http://rigaux.org/language-study/syntax-across-languages-per-language/OCaml.html

https://github.com/ocaml-multicore/ocaml-effects-tutorial

** editor
https://ocaml.org/docs/set-up-editor#vim-and-emacs

https://batsov.com/articles/2022/08/23/setting-up-emacs-for-ocaml-development/

** first program
https://ocaml.org/docs/your-first-program

#+begin_example
jacek@jacek-host:~$ cd /tmp
jacek@jacek-host:/tmp$ opam exec -- dune init proj hello
#+end_example

#+begin_example
jacek@jacek-host:/tmp$ cd hello
jacek@jacek-host:/tmp$ touch ./.ocamlformat
jacek@jacek-host:/tmp/hello$ opam exec -- dune exec hello
Hello, World!
#+end_example

** ocamlformat
https://ocaml.org/p/ocamlformat/latest/doc/getting_started.html

*** examples

#+begin_example
profile = default
version = 0.26.2
#+end_example

conventional IS default

version is optional, but useful to specify which version is used by everyone in
the project

#+begin_example
profile = ocamlformat
#+end_example

#+begin_example
profile = janestreet
#+end_example

*** home folder version
need this env variable

#+begin_example
export XDG_CONFIG_HOME=$HOME
#+end_example

** search

*** docs
https://ocaml.org/docs/search?q=let

*** packages
https://ocaml.org/packages/search?q=base

** books
https://johnwhitington.net/ocamlfromtheverybeginning/index.html

https://cs3110.github.io/textbook/chapters/intro/intro.html

english books
https://ocaml.org/books?language=english&difficulty=All&pricing=All

https://dev.realworldocaml.org/toc.html
https://dev.realworldocaml.org/imperative-programming.html

MORE OCAML Algorithms, Methods & Diversions
pdf:/home/jacek/Documents/Manuals/OCaml/mlbook2.pdf#5

promising because of debugging
https://greenteapress.com/thinkocaml/thinkocaml.pdf

interesting blog
https://borretti.me/article/two-years-ocaml

*** very good book
https://caml.inria.fr/pub/docs/oreilly-book/
https://caml.inria.fr/pub/docs/oreilly-book/html/index.html

*** other resources
https://batsov.com/articles/2022/08/19/learning-ocaml/
https://ocamlverse.github.io/
http://caml.inria.fr/pub/docs/oreilly-book/ocaml-ora-book.pdf

https://github.com/alhassy/OCamlCheatSheet/blob/master/CheatSheet.pdf
https://learnxinyminutes.com/docs/ocaml/

http://ocamlverse.net/content/quickstart.html
http://ocamlverse.net/content/toplevel.html

*** best practices
http://ocamlverse.net/content/best_practices.html

**** Part IV - Chapter 18
https://caml.inria.fr/pub/docs/oreilly-book/html/book-ora166.html
https://caml.inria.fr/pub/docs/oreilly-book/html/book-ora167.html

** calling C
https://ocaml.org/docs/calling-c-libraries

** installing libraries

#+begin_example
opam install ounit2 more-ocaml
#+end_example

** ocaml format problem

On Emacs ocamlformat fails silently if there is no .ocamlformat file in the
project. I need to find the locations that work, because the home folder did not.

is there a setting for that?
[[file:~/.emacs.d/elpa/ocamlformat-20230915.941/ocamlformat.el::(defcustom ocamlformat-enable 'enable]]

also M-x ocamlformat fixes the autocompletion on Tab

** OCaml basics

Simple Data Types pdf:/home/jacek/Documents/Manuals/OCaml/mlbook2.pdf#9
Names and Functions
Pattern Matching  pdf:/home/jacek/Documents/Manuals/OCaml/mlbook2.pdf#10
Lists
Exceptions
Partial Application
New Data Types
Basic Input / Output pdf:/home/jacek/Documents/Manuals/OCaml/mlbook2.pdf#11
Mutable State
Floating-point Numbers
The OCaml Standard Library
Simple Modules
Compiling Programs pdf:/home/jacek/Documents/Manuals/OCaml/mlbook2.pdf#11

** keywords

Keywords

The identifiers below are reserved as keywords, and cannot be employed otherwise:

#+begin_example
      and         as          assert      asr         begin       class
      constraint  do          done        downto      else        end
      exception   external    false       for         fun         function
      functor     if          in          include     inherit     initializer
      land        lazy        let         lor         lsl         lsr
      lxor        match       method      mod         module      mutable
      new         nonrec      object      of          open        or
      private     rec         sig         struct      then        to
      true        try         type        val         virtual     when
      while       with
#+end_example

The following character sequences are also keywords:

#+begin_example
    !=    #     &     &&    '     (     )     *     +     ,     -
    -.    ->    .     ..    .~    :     ::    :=    :>    ;     ;;
    <     <-    =     >     >]    >}    ?     [     [<    [>    [|
    ]     _     `     {     {<    |     |]    ||    }     ~
#+end_example

Note that the following identifiers are keywords of the now unmaintained Camlp4
system and should be avoided for backwards compatibility reasons.

#+begin_example
    parser    value    $     $$    $:    <:    <<    >>    ??
#+end_example

** single file programs
Single file programs are not worth the effort. Use dune and use the project,
otherwise the libraries problems will give you lots of frustration.
