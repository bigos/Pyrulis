onlisp.pdf

chapter 3 Functional Programming

3.1 Functional Design
page 28

pages 31-32 -----------------------------

Only a few Lisp operators are intended to be called for side-effects. In general,
the built-in operators are meant to be called for their return values. Don’t be misled
by names like sort, remove, or substitute. If you want side-effects, use setq
on the return value.

This very rule suggests that some side-effects are inevitable. Having functional
programming as an ideal doesn’t imply that programs should never have side-
effects. It just means that they should have no more than necessary.

It may take time to develop this habit. One way to start is to treat the following
operators as if there were a tax on their use:

set setq setf psetf psetq incf decf push pop pushnew
rplaca rplacd rotatef shiftf remf remprop remhash

and also let*, in which imperative programs often lie concealed. Treating
these operators as taxable is only proposed as a help toward, not a criterion for,
good Lisp style. However, this alone can get you surprisingly far.

In other languages, one of the most common causes of side-effects is the need
for a function to return multiple values. If functions can only return one value,
they have to “return” the rest by altering their parameters. Fortunately, this isn’t

-----------------------------------------------

3.2 Imperative Outside-In
page 33

3.3 Functional Interfaces
page 35
