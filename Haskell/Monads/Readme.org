* Monads
  This is for experimenting with simple monads

** Tutorials

*** dev.stephendiehl.com
    http://dev.stephendiehl.com/hask/index.html
    http://dev.stephendiehl.com/hask/index.html#eightfold-path-to-monad-satori

*** wiki.haskell.org
    https://wiki.haskell.org/Monads_as_containers
    https://wiki.haskell.org/Monads_as_computation

** Monad components
   There are a few ways to choose the basic set of functions that one can
   perform on these containers to be able to define a monad.

*** basic functions

**** pure
     (return = pure)

**** monadic bind
     (>>=)

*** more natural functions

**** fmap
     a functor map

     We can think of a functor as a type of container where we are permitted to
     apply a single function to every object in the container.

     If you will give me a blueberry for each apple I give you (a -> b), and I
     have a box of apples (f a), then I can get a box of blueberries (f b).

**** pure
     The second method, return, is specific to monads. If m is a monad, then
     return takes an element of type a, and gives a container of type (m a) with
     that element in it.

**** join
     The third method, join, also specific to monads, takes a container of
     containers m (m a), and combines them into one m a in some sensible fashion

**** so from these we have >>=
     we can construct an important operation called bind or extend, which is
     commonly given the symbol (>>=). When you define your own monad in Haskell,
     it will expect you to define just return and bind.

** Simplest example
   https://wiki.haskell.org/Monads_as_containers
   Lists are most likely the simplest, most illustrative example.

** lisp example
   https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html


*** fmap
    fmap is to some extent like this
    #+begin_src lisp
      (defun to-string (x) (format nil "~A" x))

      (funcall #'1+ 1)
      (mapcar (lambda (x) (funcall #'1+ x)) '())
      (mapcar (lambda (x) (funcall #'1+ x)) '(2))
      ;;; applicative ???
      (mapcar (lambda (x) (funcall #'to-string  (funcall #'1+ x))) '(1))
      (mapcar (lambda (x) (funcall (alexandria:compose #'to-string #'1+) x)) '(1 2 3))
    #+end_src

*** applicative

*** monad
    Functors apply a function to a wrapped value:

    Applicatives apply a wrapped function to a wrapped value:

    Monads apply a function that returns a wrapped value to a wrapped value.
