* Readme

** the tutorial
https://en.wikibooks.org/wiki/C_Programming

** excercises

https://en.wikibooks.org/wiki/C_Programming

*** Beginning C

**** hello, Intro Exercise
https://en.wikibooks.org/wiki/C_Programming/Intro_exercise
file:~/Programming/Pyrulis/C/wikibooks/hello.c::1

**** Preliminaries
https://en.wikibooks.org/wiki/C_Programming/Preliminaries

***** blocks
and variable shadowing?

#+begin_src c
int main(void)
{
    /* this is a 'block' */
    int i = 5;

    {
        /* this is also a 'block', nested inside the outer block */
        int i = 6;
    }

    return 0;
}
#+end_src

***** Whitespace

#+begin_src c
  printf("Hello world"); return 0;

  // is the same as

  printf("Hello world");
  return 0;

  // which is also the same as

  printf (
      "Hello world") ;



  return 0;
#+end_src

***** Scope

****** global and local

#+begin_src c
  int i = 5; /* this is a 'global' variable, it can be accessed from anywhere in the program */

  /* this is a function, all variables inside of it
     are "local" to the function. */
  int main(void)
  {
      int i = 6; /* 'i' now equals 6 */
      printf("%d\n", i); /* prints a '6' to the screen, instead of the global variable of 'i', which is 5 */

      return 0;
  }
#+end_src

****** variable shadowing
local variable shadowing

#+begin_src c
  /* the main function */
  int main(void)
  {
      /* this is the beginning of a 'block', you read about those above */

      int i = 6; /* this is the first variable of this 'block', 'i' */

      {
          /* this is a new 'block', and because it's a different block, it has its own scope */

          /* this is also a variable called 'i', but in a different 'block',
             because it's in a different 'block' than the first variable named 'i', it doesn't affect the first one! */
          int i = 5;
          printf("%d\n", i); /* prints a '5' onto the screen */
      }
      /* now we're back into the first block */

      printf("%d\n", i); /* prints a '6' onto the screen */

      return 0;
  }
#+end_src

**** Basics of Compilation
https://en.wikibooks.org/wiki/C_Programming/Basics_of_compilation

Compilation process steps

***** Preprocessor
First the file is preprocessed

All preprocessor directives begin with the hash character ~#~. You can see one
preprocessor directive in the Hello world program. Example:

#+begin_src c
 #include <stdio.h>
#+end_src

***** Syntax check

***** Compiling object code

***** Linking

***** Automation
Makefiles and IDEs

**** Structure and style
https://en.wikibooks.org/wiki/C_Programming/Structure_and_style

***** introduction
In C, programs are composed of statements. Statements are terminated with
a semi-colon,

***** line breaks
While you could in theory put everything in one line, only separated by
a semi-colon it is better to break up code into readable lines.

***** blank lines
Blank lines should be used to offset the main components of your code. Always use them:

+ After preprocessor directives.
+ After new variables are declared.
+ Use your own judgment for finding other places where components should be separated.

***** Indentation
Although adding simple line breaks between key blocks of code can make code
easier to read, it provides no information about the block structure of the
program.

Indentation visually separates paths of execution by moving their starting
points to a new column. This simple practice will make it much easier to read
and understand code.

***** Comments
Two styles of comments ~// style1~ and ~/* style2  */~


**** Variables
https://en.wikibooks.org/wiki/C_Programming/Variables

This is the first meaty part

**** zzz



*** Intermediate C

*** Advanced C

*** C and Beyond
