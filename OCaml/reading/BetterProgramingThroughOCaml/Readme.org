* Readme

This folder is for reading this book
https://cs3110.github.io/textbook/chapters/preface/about.html

** Ocaml manual
https://v2.ocaml.org/manual/index.html

** quotes

*** clarifying and simplyfying

https://cs3110.github.io/textbook/chapters/intro/future.html

#+begin_quote
If after OCaml you want to learn more about functional programming, you’ll be
well prepared. OCaml does a great job of clarifying and simplifying the essence
of functional programming in a way that other languages that blend functional
and imperative programming (like Scala) or take functional programming to the
extreme (like Haskell) do not.
#+end_quote

** notes
*** equality
structural vs physical

|            | structural | physical |
|------------+------------+----------|
| equality   | =          | ==       |
| inequality | <>         | !=       |
https://cs3110.github.io/textbook/chapters/basics/expressions.html#more-operators

*** functions
**** recursion with rec keyword
https://cs3110.github.io/textbook/chapters/basics/functions.html#

**** mutually recursive functions

**** pipeline
#+begin_example
5 |> inc |> square
#+end_example

**** keyword arguments
#+begin_example
let f ~name1:name1 ~name2:name2 = name1 + name2
let f ~name1 ~name2 = name1 + name2
let f ~name1:(arg1 : int) ~name2:(arg2 : int) = arg1 + arg2
#+end_example

**** optional arguments
#+begin_example
let f ?name:(arg1=8) arg2 = arg1 + arg2
#+end_example

**** tail call recursion recipe

*** debugging
https://cs3110.github.io/textbook/chapters/basics/debugging.html#debugging-in-ocaml

https://ocaml.org/docs/debugging#The-OCaml-debugger

assert invalid_arg failwith
*** type defined later wins
Potential gotcha

#+begin_src ocaml
  type t1 = C | D
  type t2 = D | E                 (* this is later type with D, so D belongs to t2 *)
  let x = D
#+end_src

So prefixes may be used in type constructors
https://cs3110.github.io/textbook/chapters/data/variants.html#scope
*** revisit testing

the tests in exercism files
file:~/exercism/ocaml/difference-of-squares/dune::2
have dune file that compiles the test, and the test file has ~open The_source_file~
*** records and tuples

tuple elements are accessed by pattern matching
*** Algebraic Data Types
Using variants, we can express a type that represents the union of several other
types, but in a type-safe way.

Variants thus provide a type-safe way of doing something that might before have
seemed impossible.

Variants also make it possible to discriminate which tag a value was constructed
with, even if multiple constructors carry the same type.
**** recursive datatypes
and potential cycle errors

**** parameterised variants
list of any type

**** polymorphic variants

#+begin_quote
type fin_or_inf = Finite of int | Infinity

let f = function
  | 0 -> Infinity
  | 1 -> Finite 1
  | n -> Finite (-n)

type fin_or_inf = Finite of int | Infinity

val f : int -> fin_or_inf = <fun>

The downside of this definition is that you were forced to define fin_or_inf even though it won’t be used throughout much of your program.

There’s another kind of variant in OCaml that supports this kind of programming: polymorphic variants. Polymorphic variants are just like variants, except:

    You don’t have to declare their type or constructors before using them.

    There is no name for a polymorphic variant type. (So another name for this feature could have been “anonymous variants”.)

    The constructors of a polymorphic variant start with a backquote character.

Using polymorphic variants, we can rewrite f:

let f = function
  | 0 -> `Infinity
  | 1 -> `Finite 1
  | n -> `Finite (-n)
#+end_quote

**** built in variants

OCaml’s built-in list data type is really a recursive, parameterized variant. It
is defined as follows:
#+begin_src ocaml
type 'a list = [] | ( :: ) of 'a * 'a list
#+end_src

OCaml’s built-in option data type is also really a parameterized variant. It’s
defined as follows:

#+begin_src ocaml
type 'a option = None | Some of 'a
#+end_src

*** Exceptions

**** order of exceptions
left to right, but arguments first

raise (C (raise (D "oops")))

**** patter matching
There is a pattern form for exceptions. Here’s an example of its usage:

#+begin_src ocaml
match List.hd [] with
  | [] -> "empty"
  | _ :: _ -> "non-empty"
  | exception (Failure s) -> s

#+end_src

**** testing exceptions

assert_raises

warning: you can create test that type checks
but still raises error before assert_raises
if you forget to wrap it in fun ~(fun () -> 2 / 0 )~

**** Map

Although, generally there is no order of evaluation, we can force evaluation by
wrapping the fragment into a let expression

it matters in printing, exceptions and mutability

There's trade-off between time and space complexity in different variants of
recursive functions

*** Structural subtyping
That is, it is based on the structure of modules rather than their names.

“Structure” here simply means the definitions contained in the module. Those
definitions are used to determine whether (M : T) is acceptable as a type
annotation, where M is a module and T is a module type.

*** Modules at the Toplevel
File: .ocamlinit

*** Modules and encapsulation
One of the main concerns of a module system is to provide encapsulation: the
hiding of information about implementation behind an interface. OCaml’s module
system makes this possible with a feature we’ve already seen: the opacity that
module TYPE ANNOTATIONS create. One special use of opacity is the declaration of
abstract types. We’ll study both of those ideas in this section.

https://cs3110.github.io/textbook/chapters/modules/encapsulation.html

While Ocaml has type inference, it is possible to define type declarations in
module signature

#+begin_src ocaml
  module type MATH = sig
    (** [fact n] is [n!]. *)
    val fact : int -> int
  end
#+end_src

see the equivalent of class C in java


Abstract Types

Pretty printing
directive #install_printer

*** Compilation Units
A compilation unit is a pair of OCaml source files in the same directory. They
share the same base name, call it x, but their extensions differ: one file is x.
ml, the other is x.mli. The file x.ml is called the implementation, and x.mli is
called the interface.

Unfortunately that does mean we’ve duplicated Stack.S in both the interface and
implementation files. There’s no way to automatically “import” an already
declared module type from a .mli file into the corresponding .ml file.

*** Functors
Functors can be though of as a parameterised structures

Since functors  are functions we can apply them

*** 6 Correctness

**** 3 possibilities

***** documentation
Documentation is the ground truth of what a programmer intended, as opposed to
what they actually wrote.
The cognitive task of explaining our ideas to other humans is certainly
different than explaining our ideas to the computer. That can expose failures in
our thinking.

***** testing
Testing is the ground truth of what a program actually does, as opposed to what
the programmer intended.

Good scientists demand evidence. That demand comes not out of arrogance but
humility. We human beings are so amazingly good at deluding ourselves.

***** proof
Finally, beyond documentation and testing, there is mathematical proof of
correctness. Techniques from logic and discrete math can be used to formally
prove that a program is correct according to a specification. Such proofs aren’t
necessarily easy—in fact they take even more human discipline and training than
documentation and testing do.

*** specifications
A specification is a contract between a client of some unit of code and the
implementer of that code. The most common place we find specifications is as
comments in the interface (.mli) files for a module. There, the implementer of
the module spells out what the client may and may not assume about the module’s
behavior.

**** Writing Specifications
Good specifications have to balance two conflicting goals; they must be
.+ sufficiently restrictive, ruling out implementations that would be useless to clients, as well as
.+ sufficiently general, not ruling out implementations that would be useful to clients.

Writing good specifications is hard because the language and compiler do nothing
to check the correctness of a specification: there’s no type system for them, no
warnings, etc.

Specifications should be written quite early. As soon as a design decision is
made, document it in a specification. Specifications should continue to be
updated throughout implementation. A specification becomes obsolete only when
the code it specifies becomes obsolete and is removed from the code base.

**** Abstraction by Specification.
Abstraction enables modular programming by hiding the details of implementations.
Specifications are a part of that kind of abstraction: they reveal certain
information about the behavior of a module without disclosing all the details of
the module’s implementation.

Locality is one of the benefits of abstraction by specification. A module can be
understood without needing to examine its implementation. This locality is
critical in implementing large programs, and even in implementing smaller
programs in teams. No one person can keep the entire system in their head at a
time.

**** Abstraction barrier
The specification forms an abstraction barrier that protects the implementer
from the client and vice versa. Making assumptions about the implementation that
are not guaranteed by the specification is known as violating the abstraction
barrier. The abstraction barrier enforces local reasoning. Further, it promotes
loose coupling between different code modules.

***  Function Documentation

balance between brevity and clarity

clarify what inputs are valid, like x >= 0

clarify what errors it may raise

low level vs high level picture of the algorithm

*** Module Documentation
+ Data abstraction is a specification of operations on a set of values
+ Data structure is an implementation of a data abstraction with  a specific representation
*** Test and Debugging

Testing is one of the ways of achieving validation
*** Black-box and Glass-box Testing
https://github.com/aantron/bisect_ppx

*** Randomized Testing with QCheck
You can start utop in terminal and do:
#+begin_src ocaml
  #require "qcheck";;
#+end_src

*** Proving Correctness
*** Structural Induction
Inductive proofs and recursive programs bear a striking similarity. In a sense,
an inductive proof is a recursive program that shows how to construct evidence
for a theorem involving an algebraic data type (ADT).

*** Algebraic Specification

Correctness proofs always need specifications. In proving the correctness of
iterative factorial, we used recursive factorial as a specification. By analogy,
we could provide two implementations of a data structure—one simple, the other
complex and efficient—and prove that the two are equivalent. That would require
us to introduce ways to translate between the two implementations.

Instead, we will pursue a different approach based on equational specifications,
aka algebraic specifications. The idea with these is to

    define the types of the data structure operations, and

    to write a set of equations that define how the operations interact with one another.

The reason the word “algebra” shows up here is (in part) that this type-and-
equation based approach is something we learned in high-school algebra. For
example, here is a specification for some operators:

*** Summary
important
https://cs3110.github.io/textbook/chapters/correctness/summary.html

Good documentation provides several pieces: a summary, preconditions,
postconditions (including errors), and examples. Documentation is written for
two different audiences, clients and maintainers. The latter needs to know about
abstraction functions and representation invariants.

See the extensive list of Terms and Concepts

Read the Further Reading

Thinking Functionally with Haskell, chapter 6. Richard Bird. Cambridge, 2015.

*** Exercises
*** 7 Mutability
**** Refs
A ref is like a pointer to typed location in memory.

~ref 0~ create ref with initial value 0
~!~ is defererence operator
~:=~ assignment

#+begin_src ocaml
  let x = ref 0
            (* !x is the initial 0 *)
  x := 2
  let y = 2 + !x
               (* y should be 4 *)
#+end_src
***** aliasing
when 2 refs point to the same location
mutating one variable mutates also the aliased variable
***** sequencing of effects
~e1; e2; e3~
evaluating for side effects, we do not care about the value
***** pointers
an option tell us that the type value can be null
to denote a null value we use None
we also have Some

shows how to do pointer operations

Obj.magic gets memory address of a ref and allows to throw away all type safety

trick of writing recursive functions without using rec
***** weak type variables
something to do with polymorphism and mutability
***** equality - physical vs structural

**** Mutable Fields
#+begin_src ocaml
type point = { x : int; y : int; mutable c : string; }
#+end_src

The operator to update a mutable field is <- which is meant to look like a left arrow.
#+begin_src ocaml
let p = {x = 0; y = 0; c = "red"}
p.c <- "white"
#+end_src

**** Arrays and Loops
#+begin_src ocaml
  let v = [|0.; 1.|]
  v.(0) <- 5.
#+end_src

Lisp inspired loops
#+begin_src ocaml
while e1 do e2 done
for x=e1 to e2 do e3 done
for x=e1 downto e2 do e3 done
#+end_src

**** Summary
**** Exercises
*** TODO 8 Data Structures
**** Hash Tables
**** Amortized Analysis
**** Red-Black Trees
**** Sequences
**** Memoization
**** Persistent Arrays
**** Promises
**** Monads
**** Summary
****  Exercises
*** 9 Interpreters
**** Example: Calculator
**** Parsing
**** Substitution Model
**** Environment Model
**** Type Checking
**** Type Inference
**** Summary
**** Exercises
*** Lagniappe

** next reading

https://cs3110.github.io/textbook/chapters/ds/intro.html
