* Reading fp-made-easier
** Index
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#3

** next reading
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#47


** parts

*** Beginner
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#35

1.1 Global State
#+begin_quote
Many would argue that Object-Oriented Programming solves these problems.
Unfortunately, it does not. It only hides them.
#+end_quote

1.2 Mutable State
1.2.1 No variables
#+begin_quote
An expression is Referentially Transparent if it can be replaced with its value without
changing the programâ€™s behavior.
#+end_quote
1.2.2 No Loops
1.3 Purity
1.4 Optimization
1.4.1 Memoization
#+begin_quote
Bad designs produce unexpected consequences whereas good designs produce
unexpected benefits.
#+end_quote

We can not memoize impure functions
1.4.2 Compiler Optimization
1.5 Types
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#47


*** Intermediate
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#234

*** Advanced
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#543

*** Beyond
pdf:/home/jacek/Documents/Manuals/Purescript/fp-made-easier.pdf#1000
