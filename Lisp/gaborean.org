* Gaborean

** think quickly with tiny steps and keyword notes
until you fill your head

** talk to the rubber duck
until you run out of ideas

** as much as you can expand ideas using domain language
until you can execute in your head

** big jump to Lisp

*** write loose high level code

*** fill the gaps with tiny steps

*** progress from

**** abstract to concrete

**** vague to specific

** discard and repeat

** code <=affects=> thinking


* Other

** russian ideas
https://www.youtube.com/watch?v=dx3YovTZRNs

https://en.wikipedia.org/wiki/Georgy_Shchedrovitsky

https://web.archive.org/web/20190330215934/http://www.fondgp.ru:80/lib/int/5

*** quotes
The essence of solving a problem is to find a language in which the solution is
obvious.

The language tries to emerge from the subconscious.

** forth book notes
[[file:~/Programming/Pyrulis/thinking-forth.org::*structured design][structured design]]
[[file:~/Programming/Pyrulis/thinking-forth.org::*FUNCTIONAL STRENGTH][FUNCTIONAL STRENGTH]]

** lisp book
  link to [[https://doc.lagout.org/programmation/Lisp/Scheme/The%20Seasoned%20Schemer%20-%20Daniel%20P.%20Friedman.pdf][seasoned schemer]]


*** CLOS modelling
move those links elsewhere
https://atomicobject.com/resources/oo-programming/hierarchy

**** hierarchies

***** is a

***** is part of

***** has a

** laws of simplicity
[[file:~/Programming/Pyrulis/dijkstra-quotes.org::*Simplicity][Dijkstra Simplicity]]

work in progress

*** principles

Reduce components
Make systems of many appear fewer, symmetry, mental compression, proximity
Deepen understanding
No duplication unless it is a neighbour
Each distinct idea expressed separately
Highlight or hide

*** opposite principles
Copy pasted components
Countless components without any organisation, big ball of mud
Complexity eats understanding
Duplicates all over the place
Spaghetti mix

*** words

**** space
proximity
symmetry
proportions

**** count
fewer
reduced

**** clarity
distinct, clear, similar, blurred
