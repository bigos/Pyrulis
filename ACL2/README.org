* Starting in Emacs
M-x load-acl2

in the eshell terminal run

#+BEGIN_EXAMPLE
cd ~/Programming/j-bob/acl2/
~/Documents/acl2-8.1/saved_acl2
#+END_EXAMPLE

when you get acl2 prompt do

M-x acl2-goodies
M-x acl2-doc

And you will have some resemblance of REPL

* using The Little Prover
** git repo
https://github.com/the-little-prover/j-bob

** more
page at https://github.com/the-little-prover/j-bob
gives examples of loading the book once you followed the steps in
*Starting in Emacs* and changed to the right directory in the j-bob folder

*** including books
This modified version loads acl2 from the standard location and uses modified
paths to load the book files.

#+BEGIN_EXAMPLE
;; Load the J-Bob language:
(include-book "~/Programming/j-bob/acl2/j-bob-lang" :uncertified-okp t)

;; Load J-Bob, our little proof assistant:
(include-book "~/Programming/j-bob/acl2/j-bob" :uncertified-okp t)

;; Load the transcript of all proofs in the book:
(include-book "~/Programming/j-bob/acl2/little-prover" :uncertified-okp t)

;; Run every proof in the book, up to and including the proof of align/align:
(dethm.align/align)
#+END_EXAMPLE

*** example
#+BEGIN_EXAMPLE
(defthm my-doubler (equal (+ x x) (* 2 x)))
#+END_EXAMPLE

*** loading my example code
(ld "~/Programming/Pyrulis/ACL2/first-definitions.lisp")

* Basic terminology

** Axiom
   A basic assumption presumed to be true
** Theorem
   A theorem is a statement that can be demonstrated to be true
** Lemma
   A short theorem used in proving a larger theorem
** Proof
   A sequence of rewriting steps that ends in 't

   If we can rewrite a claim step by step to 't then the claim is a Theorem.

* ACL2 website

** Walking tour tips
Furthermore, to be a good user of ACL2 you do not have to understand how
the theorem prover works. You just have to understand how to interact with it

When ACL2 proves a lemma, it is converted into one or more rules and stored in a
database. The theorem prover is rule-driven. By proving lemmas you can configure
ACL2 to behave in certain ways when it is trying to prove formulas in a certain
problem domain. The expert user can make ACL2 do amazingly “smart” looking
things.

But it would be wrong to think that ACL2 knows the mathematical content of a
formula just because it has proved it. What ACL2 knows — all ACL2 knows — is
what is encoded in its rules.

The user interacts with the theorem prover by giving it definitions, theorems
and advice. Most often the advice is about how to store each proved theorem as
a rule. Sometimes the advice is about how to prove a specific theorem.

The database consists of all the rules ACL2 “knows.” It is possible to include
in the database all of the rules in some certified file of other events. Such
certified files are called books .

*** bad news
The bad news is that when you command ACL2 to prove a theorem you must give
some thought to how that theorem is to be used as a rule!

For example, if after proving associativity-of-app as previously shown, you
engaged in the mathematically trivial act of proving it again but with the
equality reversed, you would have programmed ACL2’s rewriter to loop forever.

** Introduction-to-the-theorem-prover

[[http://www.cs.utexas.edu/users/moore/acl2/v8-2/combined-manual/?topic=ACL2____INTRODUCTION-TO-THE-THEOREM-PROVER][remote page with initial steps]]

[[file:///home/jacek/Documents/acl2-8.2-manual/index.html?topic=ACL2____INTRODUCTION-TO-THE-THEOREM-PROVER][local page with initial steps]]

Furthermore, instead of being limited to static analysis for certain fixed
properties, ACL2 allows you — indeed, forces you — to formalize the problem and
the questions. It “knows” nothing inherent about your problem before you start
to interact with it. But it can be used to help answer the most complicated
questions you can ask about software.

Your success ultimately comes down to your understanding of your problem domain
and your appropriate exploitation of ACL2’s strengths and avoidance of its
weaknesses. So put aside the idea of sitting down and interacting with it.
Instead, learn about it.

Do not breeze through it as you might a blog. Think your way through it.
Remember what you read. Do not take short cuts. If you start to use ACL2 before
you really know how, it will only frustrate you.

*** important links

**** introduction-to-rewrite-rules-part-1

***** special-cases-for-rewrite-rules
***** equivalent-formulas-different-rewrite-rules

**** introduction-to-key-checkpoints
***** dealing-with-key-combinations-of-function-symbols
***** generalizing-key-checkpoints
***** post-induction-key-checkpoints

**** introduction-to-rewrite-rules-part-2
***** strong-rewrite-rules
****** practice-formulating-strong-rules
******* practice-formulating-strong-rules-1
******* practice-formulating-strong-rules-2
******* practice-formulating-strong-rules-3
******* practice-formulating-strong-rules-4
******* practice-formulating-strong-rules-5
******* practice-formulating-strong-rules-6

***** specific-kinds-of-formulas-as-rewrite-rules
***** further-information-on-rewriting

**** introduction-to-the-database

**** introduction-to-hints

**** introduction-to-a-few-system-considerations

**** introductory-challenges
***** introductory-challenge-problem-1
***** introductory-challenge-problem-2
***** introductory-challenge-problem-3
 (there are others but at least do a few)

**** frequently-asked-questions-by-newcomers
