* Haskell
  https://haskell.pl-a.net/
  https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/index.html
  https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/flags.html#language-options
  https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html

** Tutorial to consider
   http://dev.stephendiehl.com/hask/
   https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/search.html

*** particularly
    http://dev.stephendiehl.com/hask/#type-holes

    http://dev.stephendiehl.com/hask/#bottoms

    http://dev.stephendiehl.com/hask/#typeclasses
    http://dev.stephendiehl.com/hask/#type-class-extensions

    http://dev.stephendiehl.com/hask/#monads

    http://dev.stephendiehl.com/hask/#language-extensions

*** other features worth mentioning
    http://dev.stephendiehl.com/hask/#deferred-type-errors

    http://dev.stephendiehl.com/hask/#debugger

**** language extensions
     https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/search.html

     https://wiki.haskell.org/Language_extensions
     https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/#any-flavor-you-like

     https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/flags.html#language-options
     https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html

***** extensions in Hackerrank example
      FlexibleInstances
      UndecidableInstances
      DuplicateRecordFields

***** extensions from  lexi lambda blog
      https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/#any-flavor-you-like

****** default
       EmptyCase
       FlexibleContexts
       FlexibleInstances
       InstanceSigs
       MultiParamTypeClasses

****** syntactic conveniences
       These things would be tiny macros in a Lisp, but they need to be
       extensions to the compiler in Haskell

       LambdaCase
       MultiWayIf
       NamedFieldPuns
       TupleSections

****** extensions to the deriving mechanism
       GHC’s typeclass deriving mechanism is one of the things that makes
       Haskell so pleasant to write, and in fact I think Haskell would be nearly
       unpalatable to write without it.

       There is rarely any reason to write a typeclass instance by hand when the
       deriving mechanism will write it automatically.

       These extensions give GHC’s typeclass deriving mechanism more power
       without any cost. Therefore, I see no reason not to enable them:

       DeriveFoldable
       DeriveFunctor
       DeriveGeneric
       DeriveLift
       DeriveTraversable
       DerivingStrategies
       GeneralizedNewtypeDeriving
       StandaloneDeriving

****** lightweight syntactic adjustments
       A couple extensions tweak Haskell’s syntax in more substantial ways than
       things like LambdaCase, but not in a significant enough way for them to
       really be at all surprising:

       BangPatterns
       KindSignatures
       TypeOperators

****** polymorphic string literals
       For me, OverloadedStrings is not optional. Haskell’s infamous
       “string problem” (discussed in more detail at the end of this blog post)
       means that String is a linked list of characters, and all code that cares
       about performance actually uses Text.

       OverloadedStrings

****** simple extensions to aid type annotation
       The following two extensions significantly round out Haskell’s language
       for referring to types, making it much easier to insert type annotations
       where necessary (for removing ambiguity or for debugging type errors):

       ScopedTypeVariables
       TypeApplications

****** simple extensions to the Haskell type system
       A few extensions tweak the Haskell type system in ways that I think are
       simple enough to be self-explanatory, even to people who might not have
       known they existed. These are as follows:

       ConstraintKinds
       RankNTypes

****** intermediate syntactic adjustments
       Three syntactic extensions to Haskell are a little bit more advanced

       ApplicativeDo
       DefaultSignatures
       PatternSynonyms

****** intermediate extensions to the Haskell type system
       The following three extensions add some complexity to the Haskell type
       system in return for some added expressive power:

       ExistentialQuantification
       GADTs - subumes the previous one
       FunctionalDependencies

****** advanced extensions to the Haskell type system
       Finally, we arrive at the last set of extensions in this list. These are
       the most advanced features Haskell’s type system currently has to offer,
       and they are likely to be the most controversial to enable globally:

       DataKinds
       TypeFamilies
       TypeFamilyDependencies

*** making Haskell more Lispy
    http://dev.stephendiehl.com/hask/#deferred-type-errors
    https://downloads.haskell.org/~ghc/7.10.1/docs/html/users_guide/partial-type-signatures.html

**** lens
     It may be able to fix many things I did not like about Haskell

     https://github.com/ekmett/lens
     https://www.fpcomplete.com/haskell/tutorial/lens/

     https://github.com/well-typed/optics

     [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjUuofp3qbwAhVwUhUIHXyOBisQFjASegQIERAD&url=https%3A%2F%2Flirias.kuleuven.be%2Fretrieve%2F522311&usg=AOvVaw3m87JHyg_D03bw2JkwwoDc][pdf about making haskell better with bypassing the restrictions]]

** Type system

*** Introduction
    https://wiki.haskell.org/Type
    https://mmhaskell.com/blog/2017/12/24/haskell-data-types-in-5-steps
    https://patxi.medium.com/intro-to-higher-kinded-types-in-haskell-df6b719e7a69

*** keywords

**** data
     data is used to define new data types mostly using existing ones as
     building blocks.

**** type
     Type synonyms are mostly just a convenience. They help make the roles of
     types clearer or provide an alias to such things as complicated list or
     tuple types.

**** newtype
     A newtype is like a cross between data and type. Like type, you’re
     essentially renaming a type. But you do this by writing a declaration that
     has exactly one constructor with exactly one type. As with a data
     declaration, you can use record syntax within newtypes.

     https://wiki.haskell.org/Newtype
     https://mmhaskell.com/blog/2016/12/26/making-your-types-readable
     https://stackoverflow.com/questions/2649305/why-is-there-data-and-newtype-in-haskell


** Typeclasses

*** diehl
    Typeclasses are one of the core abstractions in Haskell.

    Then we can define this typeclass over several different types. These
    definitions are called typeclass instances.

    For example we can define an equality class which allows us to define an
    overloaded notion of equality depending on the data structure provided.

    #+begin_src haskell
class Equal a where
  equal :: a -> a -> Bool

-- Then we can define this typeclass over several different types. These
-- definitions are called typeclass instances.

instance Equal Bool where
  equal True True   = True
  equal False False = True
  equal True False  = False
  equal False True  = False
    #+end_src

*** real world haskell
    http://book.realworldhaskell.org/read/using-typeclasses.html

    Typeclasses define a set of functions that can have different
    implementations depending on the type of data they are given.

*** wikipedia
    https://en.wikipedia.org/wiki/Type_class

    Type classes were first implemented in the Haskell programming language
    after first being proposed by Philip Wadler and Stephen Blott as an
    extension to "eqtypes" in Standard ML, and were originally conceived
    as a way of implementing overloaded arithmetic and equality operators in a
    principled fashion.

*** a blog
    https://mmhaskell.com/blog/2019/1/28/why-haskell-iv-typeclasses-vs-inheritance

*** more
    https://www.poberezkin.com/posts/2021-04-21-what-i-wish-somebody-told-me-when-i-was-learning-Haskell.html
