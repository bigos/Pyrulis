* Readme

** the tutorial
https://en.wikibooks.org/wiki/C_Programming

*** Beginning C

**** hello, Intro Exercise
https://en.wikibooks.org/wiki/C_Programming/Intro_exercise
file:~/Programming/Pyrulis/C/wikibooks/hello.c::1

**** Preliminaries
https://en.wikibooks.org/wiki/C_Programming/Preliminaries

***** blocks
and variable shadowing?

#+begin_src c
int main(void)
{
    /* this is a 'block' */
    int i = 5;

    {
        /* this is also a 'block', nested inside the outer block */
        int i = 6;
    }

    return 0;
}
#+end_src

***** Whitespace

#+begin_src c
  printf("Hello world"); return 0;

  // is the same as

  printf("Hello world");
  return 0;

  // which is also the same as

  printf (
      "Hello world") ;



  return 0;
#+end_src

***** Scope

****** global and local

#+begin_src c
  int i = 5; /* this is a 'global' variable, it can be accessed from anywhere in the program */

  /* this is a function, all variables inside of it
     are "local" to the function. */
  int main(void)
  {
      int i = 6; /* 'i' now equals 6 */
      printf("%d\n", i); /* prints a '6' to the screen, instead of the global variable of 'i', which is 5 */

      return 0;
  }
#+end_src

****** variable shadowing
local variable shadowing

#+begin_src c
  /* the main function */
  int main(void)
  {
      /* this is the beginning of a 'block', you read about those above */

      int i = 6; /* this is the first variable of this 'block', 'i' */

      {
          /* this is a new 'block', and because it's a different block, it has its own scope */

          /* this is also a variable called 'i', but in a different 'block',
             because it's in a different 'block' than the first variable named 'i', it doesn't affect the first one! */
          int i = 5;
          printf("%d\n", i); /* prints a '5' onto the screen */
      }
      /* now we're back into the first block */

      printf("%d\n", i); /* prints a '6' onto the screen */

      return 0;
  }
#+end_src

**** Basics of Compilation
https://en.wikibooks.org/wiki/C_Programming/Basics_of_compilation

Compilation process steps

***** Preprocessor
First the file is preprocessed

All preprocessor directives begin with the hash character ~#~. You can see one
preprocessor directive in the Hello world program. Example:

#+begin_src c
 #include <stdio.h>
#+end_src

***** Syntax check

***** Compiling object code

***** Linking

***** Automation
Makefiles and IDEs

**** Structure and style
https://en.wikibooks.org/wiki/C_Programming/Structure_and_style

***** introduction
In C, programs are composed of statements. Statements are terminated with
a semi-colon,

***** line breaks
While you could in theory put everything in one line, only separated by
a semi-colon it is better to break up code into readable lines.

***** blank lines
Blank lines should be used to offset the main components of your code. Always use them:

+ After preprocessor directives.
+ After new variables are declared.
+ Use your own judgment for finding other places where components should be separated.

***** Indentation
Although adding simple line breaks between key blocks of code can make code
easier to read, it provides no information about the block structure of the
program.

Indentation visually separates paths of execution by moving their starting
points to a new column. This simple practice will make it much easier to read
and understand code.

***** Comments
Two styles of comments ~// style1~ and ~/* style2  */~


**** Variables
https://en.wikibooks.org/wiki/C_Programming/Variables

This is the first meaty part

***** Declaring
#+begin_src c
int some_number;
int anumber, anothernumber, yetanothernumber;
#+end_src

***** Initialising
#+begin_src c
int some_new_number = 4;
#+end_src

***** Assigning
#+begin_src c
some_number = some_new_number;
#+end_src

***** Naming variables
Variable names in C are made up of letters (upper and lower case) and digits.
The underscore character ("_") is also permitted. Names must not begin with a
digit.

***** Literals
Anytime within a program in which you specify a value explicitly instead of
referring to a variable or some other form of data, that value is referred to as
a literal. In the initialization example above [[*Initialising][Initialising]] , 4 is a literal.

***** Four basic data types
In Standard C there are four basic data types. They are int, char, float, and double.

****** int
An integer is typically the size of one machine word, which on most modern home PCs is 32 bits

****** char
It stores the same kind of data as an int (i.e. integers), but typically has a
size of one byte. The size of a byte is specified by the macro CHAR_BIT which
specifies the number of bits in a char (byte). In standard C it never can be
less than 8 bits.

#+begin_src c
char letter1 = 'a';
char letter2 = 97; /* in ASCII, 97 = 'a' */
#+end_src

The first example is a good programming practice in that it allows a person
reading your code to understand that letter1 is being initialized with the
letter 'a' to start off with.

The second way, which should not be used when you are coding letter characters, is to write:

This is considered by some to be extremely bad practice, if we are using it to
store a character, not a small number, in that if someone reads your code, most
readers are forced to look up what character corresponds with the number 97 in
the encoding scheme. In the end, letter1 and letter2 store both the same thing –
the letter 'a', but the first method is clearer, easier to debug, and much more
straightforward.

****** float
Kind of deprecated, it may be better to use doubles consistently.

float variables can be declared using the float keyword. A float is only one
machine word in size. Therefore, it is used when less precision than a double
provides is required.

****** double
double keyword allows you to store double-precision floating point numbers –
real numbers, in other words. Its size is typically two machine words, or 8
bytes on most machines. Examples of double literals are 3.1415926535897932, 4.0,
6.022e+23 (scientific notation). If you use 4 instead of 4.0, the 4 will be
interpreted as an int.

***** sizeof
If you have any doubts as to the amount of memory actually used by any variable
you can use the sizeof operator to find out for sure.

Here we have two types of use.

#+begin_src c
sizeof object
sizeof(type)
#+end_src

***** Data type modifiers

****** long
typically 4 or 8 byte int
some compilers have long long which is 8 bytes

****** short
typically 2 byte int

****** signed
seldom used, because all types except char are signed by default

****** unsigned
if you believe your variable will never be negative you can save one bit in int representation

***** const
variable must be initialised and never be changed

***** magic numbers
better to use const than hardcoded values as 99 can mean many different things
and const allows to name values

****** #define
resembles editor find and replace
has no regard for type or structure

good convention to write its value in all CAPITALS

***** scope
global vs local variables

***** other modifiers
https://en.wikibooks.org/wiki/C_Programming/Variables#Other_Modifiers

****** static
it's complicated

When you declare a function or global variable as static, you cannot access the
function or variable through the extern (see below) keyword from other files in
your project. This is called static linkage.

When you declare a local variable as static, it is created just like any other
variable. However, when the variable goes out of scope (i.e. the block it was
local to is finished) the variable stays in memory, retaining its value.

there's more about default values

****** extern
extern is used when a file needs to access a variable in another file that it
may not have #included directly. Therefore, extern does not allocate memory for
the new variable, it just provides the compiler with sufficient information to
access a variable declared in another file.

****** volatile
volatile is a special type of modifier which informs the compiler that the value
of the variable may be changed by external entities other than the program itself.

****** auto
auto is a modifier which specifies an "automatic" variable that is automatically
created when in scope and destroyed when out of scope. If you think this sounds
like pretty much what you've been doing all along when you declare a variable,
you're right: all declared items within a block are implicitly "automatic".

****** register
register is a hint to the compiler to attempt to optimize the storage of the
given variable by storing it in a register of the computer's CPU when the
program is run. Most optimizing compilers do this anyway, so use of this keyword
is often unnecessary.

**** Simple Input and Output
https://en.wikibooks.org/wiki/C_Programming/Simple_Input_and_Output

printf, puts and scanf

***** printf
needs #include <stdio.h>

uses format specifiers
https://en.wikipedia.org/wiki/printf_format_string

***** puts
simple, without format specifiers

***** scanf
several variations

uses pointers

do not use reference ~&~ when inputting strings

may need to flush the buffer first

#+begin_src c
#include "stdio.h"

int main(void)
{
    int a;

    printf("Please input an integer value: ");
    scanf("%d", &a);
    printf("You entered: %d\n", a);

    return 0;
}
#+end_src

**** Operators and type casting
https://en.wikibooks.org/wiki/C_Programming/Operators_and_type_casting

***** primary expressions
lots of nonsense providing context for operators

***** operators
lots of interesting stuff including ternary operator

**** Arrays and Strings
https://en.wikibooks.org/wiki/C_Programming/Arrays_and_strings

***** Arrays
Declare array of 6 int values called numbers and 6 char values called letters
#+begin_src c
int numbers[6];
char letters[6];
char two_d[3][5];               /* multidimensional */
#+end_src

declare and initialise
#+begin_src c
int digits[8] = {1,2,3,4,5,6,7,8};
int numbers[2000]={245};        /* remaining numbers will be zeros */
int two_d[2][3] = {{ 5, 2, 1 },
                   { 6, 7, 8 }};
#+end_src

***** Strings
C has no string handling facilities built in; consequently, strings are defined
as arrays of characters. C allows a character array to be represented by a
character string rather than a list of characters, with the null terminating
character automatically added to the end.

#+begin_src c
char string[11] = "Merkkijono";
/* or the same */
char string[11] = {'M', 'e', 'r', 'k', 'k', 'i', 'j', 'o', 'n', 'o', '\0'};

char string[58] = "This is a very, very long "
    "string that requires two lines.";
#+end_src

string handling library
#+begin_src c
#include <string.h>  //new header file
#+end_src

**** TODO Program Flow Control
https://en.wikibooks.org/wiki/C_Programming/Program_flow_control

**** zzz

*** Intermediate C

*** Advanced C

*** C and Beyond

*** Reference Tables
https://en.wikibooks.org/wiki/C_Programming/Standard_Library_Reference

https://en.wikibooks.org/wiki/C_Programming/Preprocessor_reference

**** Language Reference

https://en.wikibooks.org/wiki/C_Programming/Language_Reference

+ https://en.wikibooks.org/wiki/C_Programming/Language_Reference#Table_of_Keywords
+ https://en.wikibooks.org/wiki/C_Programming/Language_Reference#Table_of_Operators
+ https://en.wikibooks.org/wiki/C_Programming/Language_Reference#Table_of_Data_Types

**** Platform Reference
https://en.wikibooks.org/wiki/C_Programming/POSIX_Reference
https://en.wikibooks.org/wiki/C_Programming/GNU_C_Library_Reference
https://en.wikibooks.org/wiki/C_Programming/MS_Windows_Reference
