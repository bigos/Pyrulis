* Things I did not know

** multi-line comments
pdf:/home/jacek/Documents/Manuals/Elm/Elm_in_Action.pdf#30

#+begin_example
> 1 + 2 {- in comment -} + 3
6 : number
#+end_example

** REPL prototyping and let

Following source example
#+begin_src elm
  withoutDashes str =
      let
          dash =
              '-'
          isKeepable character =
              character /= dash
      in
          String.filter isKeepable str
#+end_src

can be tried in REPL like this:
#+begin_example
> dash = '-'
> isKeepable character = character /= dash
> withoutDashes str = String.filter isKeepable str
#+end_example

The difference is that REPL version uses global scope for dash and isKeepable.

** lambda and function equality
These are equivalent

#+begin_src elm
isKeepable char = char /= '-'
isKeepable = \char -> char /= '-'
#+end_src

** infix and prefix operators
These are equivalent.

Operator precedence applies only to infix style calls.

#+begin_src elm
  7 - 3 == 4
(-) 7 3 == 4

3 + 4 == 8 - 1
(==) ((+) 3 4) ((-) 8 1) -- this is almost lispy
#+end_src

** record creation

#+begin_src elm
catLover = { name = "Li", cats = 2 } -- assigns a record to the name
-- catLover. Once assigned, names cannot be reassigned.
{ catLover | cats = 3 } -- returns a new record, based on catLover with new value cats set to 3
#+end_src

This is pattern seen in update.

** Tuple destructuring
Tuples have commas, functions in with arguments in brackets don't
Tuples can have max 3 records.

#+begin_src elm
multiply3d ( x, y, z ) = x * y * z -- Destructuring a tuple into three named values: x, y, and z
multiply3d ( 6, 7, 2 )
#+end_src
